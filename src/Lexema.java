// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexema.flex

import compilerTools.Token;
 import java.util.HashSet;
 import java.util.Set;
 import java.util.Arrays;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexema {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\5\1\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\2\26\1\27\4\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\0\1\7\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\3\50\1\64\1\65\1\0\1\66\1\67"+
    "\2\7\1\70\2\71\1\72\1\73\1\71\2\74\1\75"+
    "\3\74\1\76\1\77\1\100\2\74\1\101\10\74\1\102"+
    "\1\103\1\104\1\7\1\0\121\7\1\105\37\7\1\74"+
    "\u030e\7";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\4\17\1\20\1\21\1\22\1\23\1\24\17\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\6\1\33\1\4"+
    "\1\34\1\0\1\35\1\0\1\36\1\0\1\37\1\40"+
    "\1\0\1\2\1\41\1\42\1\25\1\43\1\17\3\42"+
    "\1\44\1\45\1\46\1\0\26\25\1\47\4\25\2\31"+
    "\1\50\4\0\1\51\1\42\1\0\1\43\1\42\1\17"+
    "\6\25\1\52\4\25\1\53\1\54\1\25\1\55\4\25"+
    "\1\56\17\25\1\57\3\31\3\0\1\2\1\41\2\51"+
    "\1\42\1\0\1\43\1\42\5\25\1\60\1\61\2\25"+
    "\1\62\3\25\1\63\1\64\1\25\1\65\2\25\1\66"+
    "\6\25\1\67\3\25\1\70\3\25\4\31\2\0\1\41"+
    "\3\51\1\42\1\0\1\43\1\42\3\25\1\71\1\72"+
    "\1\73\1\74\2\25\1\75\4\25\1\76\6\25\1\77"+
    "\1\100\5\25\5\31\3\0\4\51\1\42\1\0\1\43"+
    "\1\42\1\25\1\101\1\102\1\103\12\25\1\104\5\25"+
    "\6\31\1\105\3\0\5\51\1\42\1\0\1\43\1\42"+
    "\1\25\1\106\2\25\1\107\1\25\1\110\1\25\1\111"+
    "\1\112\1\113\5\25\7\31\4\0\6\51\1\42\1\0"+
    "\1\43\1\42\1\114\2\25\1\115\2\25\1\116\3\25"+
    "\10\31\5\0\7\51\1\42\1\0\1\43\1\42\1\25"+
    "\1\117\1\120\1\25\1\121\2\25\11\31\6\0\10\51"+
    "\1\42\1\0\1\43\1\42\1\122\1\25\1\123\1\25"+
    "\12\31\7\0\11\51\1\42\1\0\1\43\1\42\1\124"+
    "\1\25\13\31\10\0\12\51\1\42\1\0\1\43\1\42"+
    "\1\125\14\31\11\0\13\51\1\42\1\0\1\43\1\42"+
    "\15\31\12\0\14\51\1\42\1\0\1\43\1\42\16\31"+
    "\13\0\15\51\1\42\1\0\1\43\1\42\17\31\14\0"+
    "\16\51\1\42\1\0\1\43\1\42\20\31\15\0\17\51"+
    "\1\42\1\0\1\43\1\42\21\31\1\126\15\0\20\51"+
    "\1\42\1\0\1\43\1\42\22\31\16\0\21\51\1\42"+
    "\1\0\1\43\1\42\23\31\17\0\22\51\1\42\1\0"+
    "\1\43\1\42\24\31\43\0\1\42\1\0\1\43\1\42"+
    "\25\31\22\0\1\42\1\0\1\43\1\42\26\31\22\0"+
    "\1\42\1\0\1\43\1\42\27\31\1\42\1\0\1\43"+
    "\1\42\30\31\1\42\1\0\1\43\1\42\31\31\1\42"+
    "\1\0\1\43\1\42\32\31\1\42\1\0\1\43\1\42"+
    "\33\31\1\42\1\0\1\43\1\42\34\31\1\42\1\0"+
    "\1\43\1\42\35\31\1\42\1\0\1\43\1\42\36\31"+
    "\1\42\1\0\1\43\1\42\36\43\1\42\1\0\2\42"+
    "\1\0\2\42\1\0\2\42\1\0\2\42\1\0\2\42"+
    "\1\0\2\42\1\0\1\42\1\127\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[1282];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\106\0\214\0\322\0\u0118\0\106\0\106"+
    "\0\u015e\0\u01a4\0\106\0\106\0\106\0\u01ea\0\106\0\u0230"+
    "\0\106\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\106\0\106"+
    "\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be"+
    "\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee"+
    "\0\u0834\0\u087a\0\106\0\106\0\106\0\u08c0\0\106\0\u0906"+
    "\0\106\0\u064a\0\106\0\u094c\0\106\0\u01a4\0\106\0\u0992"+
    "\0\106\0\106\0\u09d8\0\u0a1e\0\u0a64\0\u0aaa\0\u0af0\0\u0b36"+
    "\0\u0b7c\0\u0bc2\0\u0c08\0\u0b7c\0\106\0\106\0\106\0\u0c4e"+
    "\0\u0c94\0\u0cda\0\u0d20\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e"+
    "\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae"+
    "\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298\0\u12de"+
    "\0\u1324\0\u136a\0\u13b0\0\u13f6\0\u143c\0\106\0\u1482\0\u14c8"+
    "\0\u150e\0\u1554\0\u159a\0\u15e0\0\u1626\0\u166c\0\u16b2\0\u16b2"+
    "\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856\0\u064a\0\u189c"+
    "\0\u18e2\0\u1928\0\u196e\0\u064a\0\u064a\0\u19b4\0\u064a\0\u19fa"+
    "\0\u1a40\0\u1a86\0\u1acc\0\u064a\0\u1b12\0\u1b58\0\u1b9e\0\u1be4"+
    "\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u1e14"+
    "\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe\0\u2044"+
    "\0\u208a\0\u20d0\0\u150e\0\106\0\u2116\0\u215c\0\u21a2\0\u21e8"+
    "\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346\0\u238c\0\u23d2\0\u064a"+
    "\0\u064a\0\u2418\0\u245e\0\u064a\0\u24a4\0\u24ea\0\u2530\0\u064a"+
    "\0\u2576\0\u25bc\0\u064a\0\u2602\0\u2648\0\u064a\0\u268e\0\u26d4"+
    "\0\u271a\0\u2760\0\u27a6\0\u27ec\0\u064a\0\u2832\0\u2878\0\u28be"+
    "\0\u064a\0\u2904\0\u294a\0\u2990\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8"+
    "\0\u2aee\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8"+
    "\0\u2d1e\0\u2d64\0\u2daa\0\u2df0\0\u2e36\0\u064a\0\u064a\0\u064a"+
    "\0\u064a\0\u2e7c\0\u2ec2\0\u064a\0\u2f08\0\u2f4e\0\u2f94\0\u2fda"+
    "\0\u064a\0\u3020\0\u3066\0\u30ac\0\u30f2\0\u3138\0\u317e\0\u064a"+
    "\0\u064a\0\u31c4\0\u320a\0\u3250\0\u3296\0\u32dc\0\u3322\0\u3368"+
    "\0\u33ae\0\u33f4\0\u343a\0\u3480\0\u34c6\0\u350c\0\u3552\0\u3598"+
    "\0\u35de\0\u3624\0\u366a\0\u36b0\0\u36f6\0\u373c\0\u3782\0\u064a"+
    "\0\u064a\0\u064a\0\u37c8\0\u380e\0\u3854\0\u389a\0\u38e0\0\u3926"+
    "\0\u396c\0\u39b2\0\u39f8\0\u3a3e\0\u064a\0\u3a84\0\u3aca\0\u3b10"+
    "\0\u3b56\0\u3b9c\0\u3be2\0\u3c28\0\u3c6e\0\u3cb4\0\u3cfa\0\u3d40"+
    "\0\106\0\u3d86\0\u3dcc\0\u3e12\0\u3e58\0\u3e9e\0\u3ee4\0\u3f2a"+
    "\0\u3f70\0\u3fb6\0\u3ffc\0\u4042\0\u4088\0\u40ce\0\u064a\0\u4114"+
    "\0\u415a\0\u064a\0\u41a0\0\u064a\0\u41e6\0\u064a\0\u064a\0\u064a"+
    "\0\u422c\0\u4272\0\u42b8\0\u42fe\0\u4344\0\u438a\0\u43d0\0\u4416"+
    "\0\u445c\0\u44a2\0\u44e8\0\u452e\0\u4574\0\u45ba\0\u4600\0\u4646"+
    "\0\u468c\0\u46d2\0\u4718\0\u475e\0\u47a4\0\u47ea\0\u4830\0\u4876"+
    "\0\u48bc\0\u4902\0\u064a\0\u4948\0\u498e\0\u064a\0\u49d4\0\u4a1a"+
    "\0\u064a\0\u4a60\0\u4aa6\0\u4aec\0\u4b32\0\u4b78\0\u4bbe\0\u4c04"+
    "\0\u4c4a\0\u4c90\0\u4cd6\0\u4d1c\0\u4d62\0\u4da8\0\u4dee\0\u4e34"+
    "\0\u4e7a\0\u4ec0\0\u4f06\0\u4f4c\0\u4f92\0\u4fd8\0\u501e\0\u5064"+
    "\0\u50aa\0\u50f0\0\u5136\0\u517c\0\u51c2\0\u064a\0\u064a\0\u5208"+
    "\0\u064a\0\u524e\0\u5294\0\u52da\0\u5320\0\u5366\0\u53ac\0\u53f2"+
    "\0\u5438\0\u547e\0\u54c4\0\u550a\0\u5550\0\u5596\0\u55dc\0\u5622"+
    "\0\u5668\0\u56ae\0\u56f4\0\u573a\0\u5780\0\u57c6\0\u580c\0\u5852"+
    "\0\u5898\0\u58de\0\u5924\0\u596a\0\u59b0\0\u59f6\0\u064a\0\u5a3c"+
    "\0\u064a\0\u5a82\0\u5ac8\0\u5b0e\0\u5b54\0\u5b9a\0\u5be0\0\u5c26"+
    "\0\u5c6c\0\u5cb2\0\u5cf8\0\u5d3e\0\u5d84\0\u5dca\0\u5e10\0\u5e56"+
    "\0\u5e9c\0\u5ee2\0\u5f28\0\u5f6e\0\u5fb4\0\u5ffa\0\u6040\0\u6086"+
    "\0\u60cc\0\u6112\0\u6158\0\u619e\0\u61e4\0\u622a\0\u6270\0\u62b6"+
    "\0\u064a\0\u62fc\0\u6342\0\u6388\0\u63ce\0\u6414\0\u645a\0\u64a0"+
    "\0\u64e6\0\u652c\0\u6572\0\u65b8\0\u65fe\0\u6644\0\u668a\0\u66d0"+
    "\0\u6716\0\u675c\0\u67a2\0\u67e8\0\u682e\0\u6874\0\u68ba\0\u6900"+
    "\0\u6946\0\u698c\0\u69d2\0\u6a18\0\u6a5e\0\u6aa4\0\u6aea\0\u6b30"+
    "\0\u6b76\0\u6bbc\0\u6c02\0\u064a\0\u6c48\0\u6c8e\0\u6cd4\0\u6d1a"+
    "\0\u6d60\0\u6da6\0\u6dec\0\u6e32\0\u6e78\0\u6ebe\0\u6f04\0\u6f4a"+
    "\0\u6f90\0\u6fd6\0\u701c\0\u7062\0\u70a8\0\u70ee\0\u7134\0\u717a"+
    "\0\u71c0\0\u7206\0\u724c\0\u7292\0\u72d8\0\u731e\0\u7364\0\u73aa"+
    "\0\u73f0\0\u7436\0\u747c\0\u74c2\0\u7508\0\u754e\0\u7594\0\u75da"+
    "\0\u7620\0\u7666\0\u76ac\0\u76f2\0\u7738\0\u777e\0\u77c4\0\u780a"+
    "\0\u7850\0\u7896\0\u78dc\0\u7922\0\u7968\0\u79ae\0\u79f4\0\u7a3a"+
    "\0\u7a80\0\u7ac6\0\u7b0c\0\u7b52\0\u7b98\0\u7bde\0\u7c24\0\u7c6a"+
    "\0\u7cb0\0\u7cf6\0\u7d3c\0\u7d82\0\u7dc8\0\u7e0e\0\u7e54\0\u7e9a"+
    "\0\u7ee0\0\u7f26\0\u7f6c\0\u7fb2\0\u7ff8\0\u803e\0\u8084\0\u80ca"+
    "\0\u8110\0\u8156\0\u819c\0\u81e2\0\u8228\0\u826e\0\u82b4\0\u82fa"+
    "\0\u8340\0\u8386\0\u83cc\0\u8412\0\u8458\0\u849e\0\u84e4\0\u852a"+
    "\0\u8570\0\u85b6\0\u85fc\0\u8642\0\u8688\0\u86ce\0\u8714\0\u875a"+
    "\0\u87a0\0\u87e6\0\u882c\0\u8872\0\u88b8\0\u88fe\0\u8944\0\u898a"+
    "\0\u89d0\0\u8a16\0\u8a5c\0\u8aa2\0\u8ae8\0\u8b2e\0\u8b74\0\u8bba"+
    "\0\u8c00\0\u8c46\0\u8c8c\0\u8cd2\0\u8d18\0\u8d5e\0\u8da4\0\u8dea"+
    "\0\u8e30\0\u8e76\0\u8ebc\0\u8f02\0\u8f48\0\u8f8e\0\u8fd4\0\u901a"+
    "\0\u9060\0\u90a6\0\u90ec\0\u9132\0\u9178\0\u91be\0\u9204\0\u924a"+
    "\0\u9290\0\u92d6\0\u931c\0\u9362\0\u93a8\0\u93ee\0\u9434\0\u947a"+
    "\0\u94c0\0\u9506\0\u954c\0\u9592\0\u95d8\0\u961e\0\u9664\0\u96aa"+
    "\0\u96f0\0\u9736\0\u977c\0\u97c2\0\u9808\0\u984e\0\u9894\0\u98da"+
    "\0\u9920\0\u9966\0\u99ac\0\u99f2\0\u9a38\0\u9a7e\0\u9ac4\0\u9b0a"+
    "\0\u9b50\0\u9b96\0\u9bdc\0\u9c22\0\u9c68\0\u9cae\0\u9cf4\0\u9d3a"+
    "\0\u9d80\0\u9dc6\0\u9e0c\0\u9e52\0\u9e98\0\u9ede\0\u9f24\0\u9f6a"+
    "\0\u9fb0\0\u9ff6\0\ua03c\0\ua082\0\ua0c8\0\ua10e\0\ua154\0\ua19a"+
    "\0\ua1e0\0\ua226\0\ua26c\0\ua2b2\0\ua2f8\0\ua33e\0\ua384\0\ua3ca"+
    "\0\ua410\0\ua456\0\ua49c\0\ua4e2\0\ua528\0\ua56e\0\ua5b4\0\ua5fa"+
    "\0\ua640\0\ua686\0\ua6cc\0\ua712\0\ua758\0\ua79e\0\ua7e4\0\ua82a"+
    "\0\ua870\0\ua8b6\0\ua8fc\0\ua942\0\ua988\0\ua9ce\0\uaa14\0\u01a4"+
    "\0\uaa5a\0\uaaa0\0\uaae6\0\uab2c\0\uab72\0\uabb8\0\uabfe\0\uac44"+
    "\0\uac8a\0\uacd0\0\uad16\0\uad5c\0\uada2\0\uade8\0\uae2e\0\uae74"+
    "\0\uaeba\0\uaf00\0\uaf46\0\uaf8c\0\uafd2\0\ub018\0\ub05e\0\ub0a4"+
    "\0\ub0ea\0\ub130\0\ub176\0\ub1bc\0\ub202\0\ub248\0\ub28e\0\ub2d4"+
    "\0\ub31a\0\ub360\0\ub3a6\0\ub3ec\0\ub432\0\ub478\0\ub4be\0\ub504"+
    "\0\ub54a\0\ub590\0\ub5d6\0\ub61c\0\ub662\0\ub6a8\0\ub6ee\0\ub734"+
    "\0\ub77a\0\ub7c0\0\ub806\0\ub84c\0\ub892\0\ub8d8\0\ub91e\0\ub964"+
    "\0\ub9aa\0\ub9f0\0\uba36\0\uba7c\0\ubac2\0\ubb08\0\ubb4e\0\ubb94"+
    "\0\ubbda\0\ubc20\0\ubc66\0\ubcac\0\ubcf2\0\ubd38\0\ubd7e\0\ubdc4"+
    "\0\ube0a\0\ube50\0\ube96\0\ubedc\0\ubf22\0\ubf68\0\ubfae\0\ubff4"+
    "\0\uc03a\0\uc080\0\uc0c6\0\uc10c\0\uc152\0\uc198\0\uc1de\0\uc224"+
    "\0\uc26a\0\uc2b0\0\uc2f6\0\uc33c\0\uc382\0\uc3c8\0\uc40e\0\uc454"+
    "\0\uc49a\0\uc4e0\0\uc526\0\uc56c\0\uc5b2\0\uc5f8\0\uc63e\0\uc684"+
    "\0\uc6ca\0\uc710\0\uc756\0\uc79c\0\uc7e2\0\uc828\0\uc86e\0\uc8b4"+
    "\0\uc8fa\0\uc940\0\uc986\0\uc9cc\0\uca12\0\uca58\0\uca9e\0\ucae4"+
    "\0\ucb2a\0\ucb70\0\ucbb6\0\ucbfc\0\ucc42\0\ucc88\0\uccce\0\ucd14"+
    "\0\ucd5a\0\ucda0\0\ucde6\0\uce2c\0\uce72\0\uceb8\0\ucefe\0\ucf44"+
    "\0\ucf8a\0\ucfd0\0\ud016\0\ud05c\0\ud0a2\0\ud0e8\0\ud12e\0\ud174"+
    "\0\ud1ba\0\ud200\0\ud246\0\ud28c\0\ud2d2\0\ud318\0\ud35e\0\ud3a4"+
    "\0\ud3ea\0\ud430\0\ud476\0\ud4bc\0\ud502\0\ud548\0\ud58e\0\ud5d4"+
    "\0\ud61a\0\ud660\0\ud6a6\0\ud6ec\0\ud732\0\ud778\0\ud7be\0\ud804"+
    "\0\ud84a\0\ud890\0\ud8d6\0\ud91c\0\ud962\0\ud9a8\0\ud9ee\0\uda34"+
    "\0\uda7a\0\udac0\0\udb06\0\udb4c\0\udb92\0\udbd8\0\udc1e\0\udc64"+
    "\0\udcaa\0\udcf0\0\udd36\0\udd7c\0\uddc2\0\ude08\0\ude4e\0\ude94"+
    "\0\udeda\0\udf20\0\udf66\0\udfac\0\udff2\0\ue038\0\ue07e\0\ue0c4"+
    "\0\ue10a\0\ue150\0\ue196\0\ue1dc\0\ue222\0\ue268\0\ue2ae\0\ue2f4"+
    "\0\ue33a\0\ue380\0\ue3c6\0\ue40c\0\ue452\0\ue498\0\ue4de\0\ue524"+
    "\0\ue56a\0\ue5b0\0\ue5f6\0\ue63c\0\ue682\0\ue6c8\0\ue70e\0\ue754"+
    "\0\ue79a\0\ue7e0\0\ue826\0\ue86c\0\ue8b2\0\ue8f8\0\ue93e\0\ue984"+
    "\0\ue9ca\0\uea10\0\uea56\0\uea9c\0\ueae2\0\ueb28\0\ueb6e\0\u2b7a"+
    "\0\uebb4\0\uebfa\0\uec40\0\uec86\0\ueccc\0\ued12\0\ued58\0\ued9e"+
    "\0\uede4\0\uee2a\0\uee70\0\ueeb6\0\ueefc\0\uef42\0\uef88\0\uefce"+
    "\0\uf014\0\uf05a\0\uf0a0\0\uf0e6\0\uf12c\0\uf172\0\uf1b8\0\uf1fe"+
    "\0\uf244\0\uf28a\0\ucb2a\0\ucb70\0\ucbb6\0\ucbfc\0\ucc42\0\ucc88"+
    "\0\uccce\0\ucd14\0\ucd5a\0\ucda0\0\ucde6\0\uce2c\0\uce72\0\uceb8"+
    "\0\ucefe\0\ucf44\0\ucf8a\0\ucfd0\0\uf2d0\0\uf316\0\uf35c\0\uf3a2"+
    "\0\uf3e8\0\uf42e\0\uf474\0\uf4ba\0\uf500\0\uf546\0\uf58c\0\uf5d2"+
    "\0\uf618\0\uf65e\0\uf6a4\0\uf6ea\0\uf730\0\uf776\0\uf7bc\0\uf802"+
    "\0\uf848\0\uf88e\0\uf8d4\0\uf91a\0\uf960\0\uf9a6\0\uf9ec\0\ufa32"+
    "\0\ufa78\0\ufabe\0\ufb04\0\ufb4a\0\ufb90\0\ufbd6\0\ufc1c\0\ufc62"+
    "\0\ufca8\0\ufcee\0\ufd34\0\ufd7a\0\ufdc0\0\ufe06\0\ufe4c\0\ufe92"+
    "\0\ufed8\0\uff1e\0\uff64\0\uffaa\0\ufff0\1\66\1\174\1\302"+
    "\1\u0108\1\u014e\1\u0194\1\u01da\1\u0220\1\u0266\1\u02ac\1\u02f2"+
    "\1\u0338\1\u037e\1\u03c4\1\u040a\1\u0450\1\u0496\1\u04dc\1\u0522"+
    "\1\u0568\1\u05ae\1\u05f4\1\u063a\1\u0680\1\u06c6\1\u070c\1\u0752"+
    "\1\u0798\1\u07de\1\u0824\1\u086a\1\u08b0\1\u08f6\1\u093c\1\u0982"+
    "\1\u09c8\1\u0a0e\1\u0a54\1\u0a9a\1\u0ae0\1\u0b26\1\u0b6c\1\u0bb2"+
    "\1\u0bf8\1\u0c3e\1\u0c84\1\u0cca\1\u0d10\1\u0d56\1\u0d9c\1\u0de2"+
    "\1\u0e28\1\u0e6e\1\u0eb4\1\u0efa\1\u0f40\1\u0f86\1\u0fcc\1\u1012"+
    "\1\u1058\1\u109e\1\u10e4\1\u112a\1\u1170\1\u11b6\1\u11fc\1\u1242"+
    "\1\u1288\1\u12ce\1\u1314\1\u135a\1\u13a0\1\u13e6\1\u142c\1\u1472"+
    "\1\u14b8\1\u14fe\1\u1544\1\u158a\1\u15d0\1\u1616\1\u165c\1\u16a2"+
    "\1\u16e8\1\u172e\1\u1774\1\u17ba\1\u1800\1\u1846\1\u188c\1\u18d2"+
    "\1\u1918\1\u195e\1\u19a4\1\u19ea\1\u1a30\1\u1a76\1\u1abc\1\u1b02"+
    "\1\u1b48\1\u1b8e\1\u1bd4\1\u1c1a\1\u1c60\1\u1ca6\1\u1cec\1\u1d32"+
    "\1\u1d78\1\u1dbe\1\u1e04\1\u1e4a\1\u1e90\1\u1ed6\1\u1f1c\1\u1f62"+
    "\1\u1fa8\1\u1fee\1\u2034\1\u207a\1\u20c0\1\u2106\1\u214c\1\u2192"+
    "\1\u21d8\1\u221e\1\u2264\1\u22aa\1\u22f0\1\u2336\1\u237c\1\u23c2"+
    "\1\u2408\1\u244e\1\u2494\1\u24da\1\u2520\1\u2566\1\u25ac\1\u25f2"+
    "\1\u2638\1\u267e\1\u26c4\1\u270a\1\u2750\1\u2796\1\u27dc\1\u2822"+
    "\1\u2868\1\u28ae\1\u28f4\1\u293a\1\u2980\1\u29c6\1\u2a0c\1\u2a52"+
    "\1\u2a98\1\u2ade\1\u2b24\1\u2b6a\1\u2bb0\1\u2bf6\1\u2c3c\1\u2c82"+
    "\1\u2cc8\1\u2d0e\1\u2d54\1\u2d9a\1\u2de0\1\u2e26\1\u2e6c\1\u2eb2"+
    "\1\u2ef8\1\u2f3e\1\u2f84\1\u2fca\1\u3010\1\u3056\1\u309c\1\u30e2"+
    "\1\u3128\1\u316e\1\u31b4\1\u31fa\1\u3240\1\u3286\1\u32cc\1\u3312"+
    "\1\u3358\1\u339e\1\u33e4\1\u342a\1\u3470\1\u34b6\1\u34fc\1\u3542"+
    "\1\u3588\1\u35ce\0\106\1\u3614\1\u2d9a\1\u2de0\1\u2e26\1\u2e6c"+
    "\1\u2eb2\1\u2ef8\1\u2f3e\1\u2f84\1\u2fca\1\u3010\1\u3056\1\u309c"+
    "\1\u30e2\1\u3128\1\u316e\1\u31b4\1\u31fa\1\u3240\1\u3286\1\u32cc"+
    "\1\u3312\1\u3358\1\u339e\1\u33e4\1\u342a\1\u3470\1\u34b6\1\u34fc"+
    "\1\u3542\1\u2d54\1\u365a\1\u36a0\1\u36e6\1\u372c\1\u3772\1\u37b8"+
    "\1\u37fe\1\u3844\1\u388a\1\u38d0\1\u3916\1\u395c\1\u39a2\1\u39e8"+
    "\1\u3a2e\1\u3a74\1\u3aba\1\u3b00\1\u3b46\1\u3b8c\1\u3bd2\0\u0c4e"+
    "\1\u3c18\1\u3bd2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1282];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\3\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\2\42\1\43\2\42\1\44\1\45\2\42\1\46"+
    "\1\42\1\47\1\50\1\51\1\42\1\52\1\42\1\53"+
    "\1\54\1\55\12\56\1\57\1\60\1\61\1\62\110\0"+
    "\1\3\137\0\1\63\74\0\6\64\5\0\6\64\24\0"+
    "\4\64\23\0\1\65\74\0\12\66\1\67\46\66\1\70"+
    "\24\66\34\0\1\71\105\0\1\72\66\0\1\73\4\0"+
    "\1\74\104\0\1\75\1\0\6\76\5\0\27\77\3\0"+
    "\12\100\3\0\1\77\21\0\1\75\1\0\6\101\5\0"+
    "\27\77\3\0\12\100\3\0\1\77\21\0\1\75\1\0"+
    "\4\102\1\103\1\104\5\0\27\77\3\0\12\100\3\0"+
    "\1\77\21\0\1\75\1\0\6\104\5\0\27\77\3\0"+
    "\12\100\3\0\1\77\34\0\1\105\105\0\1\106\105\0"+
    "\1\107\74\0\6\110\5\0\3\42\1\111\7\42\1\112"+
    "\3\42\1\113\3\42\1\114\3\42\3\0\12\100\3\0"+
    "\1\42\23\0\6\110\5\0\1\115\15\42\1\116\10\42"+
    "\3\0\12\100\3\0\1\42\23\0\6\110\5\0\1\117"+
    "\12\42\1\120\2\42\1\121\10\42\3\0\12\100\3\0"+
    "\1\42\23\0\6\110\5\0\4\42\1\122\22\42\3\0"+
    "\12\100\3\0\1\42\23\0\6\110\5\0\15\42\1\123"+
    "\11\42\3\0\12\100\3\0\1\42\23\0\6\110\5\0"+
    "\1\124\20\42\1\125\5\42\3\0\12\100\3\0\1\42"+
    "\23\0\6\110\5\0\27\42\3\0\12\100\3\0\1\42"+
    "\23\0\6\110\5\0\14\42\1\126\11\42\1\127\3\0"+
    "\12\100\3\0\1\42\23\0\6\110\5\0\2\42\1\130"+
    "\1\42\1\131\3\42\1\132\16\42\3\0\12\100\3\0"+
    "\1\42\23\0\6\110\5\0\10\42\1\133\16\42\3\0"+
    "\12\100\3\0\1\42\23\0\6\110\5\0\1\134\20\42"+
    "\1\135\5\42\3\0\12\100\3\0\1\42\23\0\6\110"+
    "\5\0\4\42\1\136\22\42\3\0\12\100\3\0\1\42"+
    "\23\0\6\110\5\0\10\42\1\137\5\42\1\140\5\42"+
    "\1\141\2\42\3\0\12\100\3\0\1\42\23\0\6\110"+
    "\5\0\16\42\1\142\10\42\3\0\12\100\3\0\1\42"+
    "\23\0\6\110\5\0\4\42\1\143\22\42\3\0\12\100"+
    "\3\0\1\42\23\0\6\144\5\0\27\144\3\0\12\145"+
    "\3\0\1\144\103\0\1\146\25\0\6\147\5\0\6\147"+
    "\24\0\4\147\12\0\12\66\1\67\46\66\1\70\11\66"+
    "\1\150\12\66\15\151\1\152\70\151\2\74\1\3\1\74"+
    "\1\4\101\74\23\0\6\153\100\0\6\154\5\0\27\77"+
    "\3\0\12\100\3\0\1\77\23\0\6\155\5\0\27\110"+
    "\3\0\12\100\3\0\1\110\23\0\6\156\5\0\27\156"+
    "\3\0\12\156\3\0\1\156\21\0\1\75\1\0\6\157"+
    "\5\0\27\77\3\0\12\100\3\0\1\77\21\0\1\75"+
    "\1\0\6\160\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\21\0\1\75\1\0\5\160\1\157\5\0\27\77\3\0"+
    "\12\100\3\0\1\77\23\0\6\110\5\0\27\110\3\0"+
    "\12\100\3\0\1\110\23\0\6\110\5\0\4\42\1\161"+
    "\22\42\3\0\12\100\3\0\1\42\23\0\6\110\5\0"+
    "\1\162\26\42\3\0\12\100\3\0\1\42\23\0\6\110"+
    "\5\0\1\163\26\42\3\0\12\100\3\0\1\42\23\0"+
    "\6\110\5\0\21\42\1\164\5\42\3\0\12\100\3\0"+
    "\1\42\23\0\6\110\5\0\11\42\1\165\15\42\3\0"+
    "\12\100\3\0\1\42\23\0\6\110\5\0\16\42\1\166"+
    "\10\42\3\0\12\100\3\0\1\42\23\0\6\110\5\0"+
    "\3\42\1\167\5\42\1\170\15\42\3\0\12\100\3\0"+
    "\1\42\23\0\6\110\5\0\1\171\26\42\3\0\12\100"+
    "\3\0\1\42\23\0\6\110\5\0\13\42\1\172\1\42"+
    "\1\173\11\42\3\0\12\100\3\0\1\42\23\0\6\110"+
    "\5\0\2\42\1\174\2\42\1\175\13\42\1\176\5\42"+
    "\3\0\12\100\3\0\1\42\23\0\6\110\5\0\23\42"+
    "\1\177\3\42\3\0\12\100\3\0\1\42\23\0\6\110"+
    "\5\0\13\42\1\200\13\42\3\0\12\100\3\0\1\42"+
    "\23\0\6\110\5\0\4\42\1\201\22\42\3\0\12\100"+
    "\3\0\1\42\23\0\6\110\5\0\17\42\1\202\7\42"+
    "\3\0\12\100\3\0\1\42\23\0\6\110\5\0\20\42"+
    "\1\203\6\42\3\0\12\100\3\0\1\42\23\0\6\110"+
    "\5\0\3\42\1\204\23\42\3\0\12\100\3\0\1\42"+
    "\23\0\6\110\5\0\4\42\1\205\22\42\3\0\12\100"+
    "\3\0\1\42\23\0\6\110\5\0\14\42\1\206\12\42"+
    "\3\0\12\100\3\0\1\42\23\0\6\110\5\0\4\42"+
    "\1\207\10\42\1\210\11\42\3\0\12\100\3\0\1\42"+
    "\23\0\6\110\5\0\21\42\1\211\5\42\3\0\12\100"+
    "\3\0\1\42\23\0\6\110\5\0\4\42\1\212\3\42"+
    "\1\213\16\42\3\0\12\100\3\0\1\42\23\0\6\110"+
    "\5\0\17\42\1\214\3\42\1\215\1\42\1\216\1\42"+
    "\3\0\12\100\3\0\1\42\23\0\6\110\5\0\15\42"+
    "\1\217\11\42\3\0\12\100\3\0\1\42\23\0\6\110"+
    "\5\0\13\42\1\220\13\42\3\0\12\100\3\0\1\42"+
    "\23\0\6\110\5\0\1\42\1\221\25\42\3\0\12\100"+
    "\3\0\1\42\23\0\6\110\5\0\14\42\1\222\12\42"+
    "\3\0\12\100\3\0\1\42\23\0\6\110\5\0\2\42"+
    "\1\223\16\42\1\224\5\42\3\0\12\100\3\0\1\42"+
    "\23\0\6\225\5\0\27\225\3\0\12\226\3\0\1\225"+
    "\23\0\6\227\5\0\27\227\3\0\12\226\3\0\1\227"+
    "\23\0\6\230\5\0\6\230\24\0\4\230\12\0\12\66"+
    "\1\67\46\66\1\70\17\66\1\231\4\66\15\151\1\232"+
    "\105\151\1\232\4\151\1\233\63\151\21\0\1\234\1\0"+
    "\1\235\5\236\100\0\6\237\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\240\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\241\5\0\27\241\3\0\12\241"+
    "\3\0\1\241\21\0\1\75\1\0\6\242\5\0\27\77"+
    "\3\0\12\100\3\0\1\77\23\0\6\110\5\0\13\42"+
    "\1\243\13\42\3\0\12\100\3\0\1\42\23\0\6\110"+
    "\5\0\21\42\1\244\5\42\3\0\12\100\3\0\1\42"+
    "\23\0\6\110\5\0\6\42\1\245\20\42\3\0\12\100"+
    "\3\0\1\42\23\0\6\110\5\0\1\246\26\42\3\0"+
    "\12\100\3\0\1\42\23\0\6\110\5\0\1\247\26\42"+
    "\3\0\12\100\3\0\1\42\23\0\6\110\5\0\13\42"+
    "\1\250\13\42\3\0\12\100\3\0\1\42\23\0\6\110"+
    "\5\0\1\251\26\42\3\0\12\100\3\0\1\42\23\0"+
    "\6\110\5\0\22\42\1\252\4\42\3\0\12\100\3\0"+
    "\1\42\23\0\6\110\5\0\16\42\1\253\10\42\3\0"+
    "\12\100\3\0\1\42\23\0\6\110\5\0\5\42\1\254"+
    "\14\42\1\255\4\42\3\0\12\100\3\0\1\42\23\0"+
    "\6\110\5\0\4\42\1\256\22\42\3\0\12\100\3\0"+
    "\1\42\23\0\6\110\5\0\22\42\1\257\4\42\3\0"+
    "\12\100\3\0\1\42\23\0\6\110\5\0\2\42\1\260"+
    "\24\42\3\0\12\100\3\0\1\42\23\0\6\110\5\0"+
    "\21\42\1\261\5\42\3\0\12\100\3\0\1\42\23\0"+
    "\6\110\5\0\24\42\1\262\2\42\3\0\12\100\3\0"+
    "\1\42\23\0\6\110\5\0\21\42\1\263\5\42\3\0"+
    "\12\100\3\0\1\42\23\0\6\110\5\0\17\42\1\264"+
    "\7\42\3\0\12\100\3\0\1\42\23\0\6\110\5\0"+
    "\15\42\1\265\11\42\3\0\12\100\3\0\1\42\23\0"+
    "\6\110\5\0\10\42\1\266\16\42\3\0\12\100\3\0"+
    "\1\42\23\0\6\110\5\0\1\267\26\42\3\0\12\100"+
    "\3\0\1\42\23\0\6\110\5\0\15\42\1\270\11\42"+
    "\3\0\12\100\3\0\1\42\23\0\6\110\5\0\15\42"+
    "\1\271\11\42\3\0\12\100\3\0\1\42\23\0\6\110"+
    "\5\0\4\42\1\272\22\42\3\0\12\100\3\0\1\42"+
    "\23\0\6\110\5\0\16\42\1\273\10\42\3\0\12\100"+
    "\3\0\1\42\23\0\6\110\5\0\10\42\1\274\16\42"+
    "\3\0\12\100\3\0\1\42\23\0\6\110\5\0\16\42"+
    "\1\275\10\42\3\0\12\100\3\0\1\42\23\0\6\110"+
    "\5\0\23\42\1\276\3\42\3\0\12\100\3\0\1\42"+
    "\23\0\6\110\5\0\10\42\1\277\16\42\3\0\12\100"+
    "\3\0\1\42\23\0\6\110\5\0\1\300\26\42\3\0"+
    "\12\100\3\0\1\42\23\0\6\110\5\0\23\42\1\301"+
    "\3\42\3\0\12\100\3\0\1\42\23\0\6\110\5\0"+
    "\1\302\2\42\1\303\4\42\1\304\16\42\3\0\12\100"+
    "\3\0\1\42\23\0\6\305\5\0\27\305\3\0\12\306"+
    "\3\0\1\305\23\0\6\307\5\0\27\307\3\0\12\306"+
    "\3\0\1\307\23\0\6\310\5\0\27\310\3\0\12\306"+
    "\3\0\1\310\23\0\6\311\5\0\6\311\24\0\4\311"+
    "\12\0\12\66\1\67\46\66\1\70\14\66\1\312\7\66"+
    "\15\151\1\232\4\151\1\3\63\151\21\0\1\313\1\0"+
    "\1\314\5\315\76\0\1\313\1\0\1\316\5\315\100\0"+
    "\6\317\5\0\27\77\3\0\12\100\3\0\1\77\23\0"+
    "\6\320\5\0\27\77\3\0\12\100\3\0\1\77\23\0"+
    "\6\321\5\0\27\321\3\0\12\321\3\0\1\321\21\0"+
    "\1\75\1\0\6\322\5\0\27\77\3\0\12\100\3\0"+
    "\1\77\23\0\6\110\5\0\1\323\26\42\3\0\12\100"+
    "\3\0\1\42\23\0\6\110\5\0\14\42\1\324\12\42"+
    "\3\0\12\100\3\0\1\42\23\0\6\110\5\0\1\325"+
    "\26\42\3\0\12\100\3\0\1\42\23\0\6\110\5\0"+
    "\22\42\1\326\4\42\3\0\12\100\3\0\1\42\23\0"+
    "\6\110\5\0\21\42\1\327\5\42\3\0\12\100\3\0"+
    "\1\42\23\0\6\110\5\0\4\42\1\330\22\42\3\0"+
    "\12\100\3\0\1\42\23\0\6\110\5\0\21\42\1\331"+
    "\5\42\3\0\12\100\3\0\1\42\23\0\6\110\5\0"+
    "\16\42\1\332\10\42\3\0\12\100\3\0\1\42\23\0"+
    "\6\110\5\0\2\42\1\333\24\42\3\0\12\100\3\0"+
    "\1\42\23\0\6\110\5\0\16\42\1\334\10\42\3\0"+
    "\12\100\3\0\1\42\23\0\6\110\5\0\25\42\1\335"+
    "\1\42\3\0\12\100\3\0\1\42\23\0\6\110\5\0"+
    "\10\42\1\336\16\42\3\0\12\100\3\0\1\42\23\0"+
    "\6\110\5\0\10\42\1\337\16\42\3\0\12\100\3\0"+
    "\1\42\23\0\6\110\5\0\23\42\1\340\3\42\3\0"+
    "\12\100\3\0\1\42\23\0\6\110\5\0\21\42\1\341"+
    "\5\42\3\0\12\100\3\0\1\42\23\0\6\110\5\0"+
    "\3\42\1\342\23\42\3\0\12\100\3\0\1\42\23\0"+
    "\6\110\5\0\2\42\1\343\24\42\3\0\12\100\3\0"+
    "\1\42\23\0\6\110\5\0\23\42\1\344\3\42\3\0"+
    "\12\100\3\0\1\42\23\0\6\110\5\0\21\42\1\345"+
    "\5\42\3\0\12\100\3\0\1\42\23\0\6\110\5\0"+
    "\22\42\1\346\4\42\3\0\12\100\3\0\1\42\23\0"+
    "\6\110\5\0\1\347\26\42\3\0\12\100\3\0\1\42"+
    "\23\0\6\110\5\0\21\42\1\350\5\42\3\0\12\100"+
    "\3\0\1\42\23\0\6\110\5\0\21\42\1\351\5\42"+
    "\3\0\12\100\3\0\1\42\23\0\6\110\5\0\3\42"+
    "\1\352\17\42\1\353\3\42\3\0\12\100\3\0\1\42"+
    "\23\0\6\110\5\0\1\354\3\42\1\355\22\42\3\0"+
    "\12\100\3\0\1\42\23\0\6\110\5\0\26\42\1\356"+
    "\3\0\12\100\3\0\1\42\23\0\6\357\5\0\27\357"+
    "\3\0\12\360\3\0\1\357\23\0\6\361\5\0\27\361"+
    "\3\0\12\360\3\0\1\361\23\0\6\362\5\0\27\362"+
    "\3\0\12\360\3\0\1\362\23\0\6\363\5\0\27\363"+
    "\3\0\12\360\3\0\1\363\23\0\6\364\5\0\6\364"+
    "\24\0\4\364\12\0\12\66\1\67\46\66\1\70\13\66"+
    "\1\365\10\66\23\0\6\366\76\0\1\313\1\0\1\367"+
    "\5\370\76\0\1\313\1\0\1\371\5\370\76\0\1\313"+
    "\1\0\1\372\5\370\100\0\6\373\5\0\27\77\3\0"+
    "\12\100\3\0\1\77\23\0\6\374\5\0\27\77\3\0"+
    "\12\100\3\0\1\77\23\0\6\375\5\0\27\375\3\0"+
    "\12\375\3\0\1\375\21\0\1\75\1\0\6\376\5\0"+
    "\27\77\3\0\12\100\3\0\1\77\23\0\6\110\5\0"+
    "\15\42\1\377\11\42\3\0\12\100\3\0\1\42\23\0"+
    "\6\110\5\0\1\u0100\26\42\3\0\12\100\3\0\1\42"+
    "\23\0\6\110\5\0\21\42\1\u0101\5\42\3\0\12\100"+
    "\3\0\1\42\23\0\6\110\5\0\13\42\1\u0102\13\42"+
    "\3\0\12\100\3\0\1\42\23\0\6\110\5\0\7\42"+
    "\1\u0103\17\42\3\0\12\100\3\0\1\42\23\0\6\110"+
    "\5\0\4\42\1\u0104\22\42\3\0\12\100\3\0\1\42"+
    "\23\0\6\110\5\0\4\42\1\u0105\22\42\3\0\12\100"+
    "\3\0\1\42\23\0\6\110\5\0\1\u0106\26\42\3\0"+
    "\12\100\3\0\1\42\23\0\6\110\5\0\21\42\1\u0107"+
    "\5\42\3\0\12\100\3\0\1\42\23\0\6\110\5\0"+
    "\4\42\1\u0108\22\42\3\0\12\100\3\0\1\42\23\0"+
    "\6\110\5\0\10\42\1\u0109\16\42\3\0\12\100\3\0"+
    "\1\42\23\0\6\110\5\0\10\42\1\u010a\16\42\3\0"+
    "\12\100\3\0\1\42\23\0\6\110\5\0\15\42\1\u010b"+
    "\11\42\3\0\12\100\3\0\1\42\23\0\6\110\5\0"+
    "\1\u010c\26\42\3\0\12\100\3\0\1\42\23\0\6\110"+
    "\5\0\21\42\1\u010d\5\42\3\0\12\100\3\0\1\42"+
    "\23\0\6\110\5\0\4\42\1\u010e\22\42\3\0\12\100"+
    "\3\0\1\42\23\0\6\110\5\0\21\42\1\u010f\5\42"+
    "\3\0\12\100\3\0\1\42\23\0\6\110\5\0\3\42"+
    "\1\u0110\23\42\3\0\12\100\3\0\1\42\23\0\6\110"+
    "\5\0\21\42\1\u0111\5\42\3\0\12\100\3\0\1\42"+
    "\23\0\6\110\5\0\20\42\1\u0112\6\42\3\0\12\100"+
    "\3\0\1\42\23\0\6\u0113\5\0\27\u0113\3\0\12\u0114"+
    "\3\0\1\u0113\23\0\6\u0115\5\0\27\u0115\3\0\12\u0114"+
    "\3\0\1\u0115\23\0\6\u0116\5\0\27\u0116\3\0\12\u0114"+
    "\3\0\1\u0116\23\0\6\u0117\5\0\27\u0117\3\0\12\u0114"+
    "\3\0\1\u0117\23\0\6\u0118\5\0\27\u0118\3\0\12\u0114"+
    "\3\0\1\u0118\23\0\6\u0119\5\0\6\u0119\24\0\4\u0119"+
    "\12\0\12\66\1\67\46\66\1\70\15\66\1\u011a\6\66"+
    "\21\0\1\234\1\0\1\u011b\5\u011c\76\0\1\313\1\0"+
    "\1\u011d\5\u011e\76\0\1\313\1\0\1\u011f\5\u011e\76\0"+
    "\1\313\1\0\1\u0120\5\u011e\76\0\1\313\1\0\1\u0121"+
    "\5\u011e\100\0\6\u0122\5\0\27\77\3\0\12\100\3\0"+
    "\1\77\23\0\6\u0123\5\0\27\77\3\0\12\100\3\0"+
    "\1\77\23\0\6\u0124\5\0\27\u0124\3\0\12\u0124\3\0"+
    "\1\u0124\21\0\1\75\1\0\6\u0125\5\0\27\77\3\0"+
    "\12\100\3\0\1\77\23\0\6\110\5\0\23\42\1\u0126"+
    "\3\42\3\0\12\100\3\0\1\42\23\0\6\110\5\0"+
    "\1\u0127\26\42\3\0\12\100\3\0\1\42\23\0\6\110"+
    "\5\0\2\42\1\u0128\24\42\3\0\12\100\3\0\1\42"+
    "\23\0\6\110\5\0\21\42\1\u0129\5\42\3\0\12\100"+
    "\3\0\1\42\23\0\6\110\5\0\21\42\1\u012a\5\42"+
    "\3\0\12\100\3\0\1\42\23\0\6\110\5\0\1\u012b"+
    "\26\42\3\0\12\100\3\0\1\42\23\0\6\110\5\0"+
    "\21\42\1\u012c\5\42\3\0\12\100\3\0\1\42\23\0"+
    "\6\110\5\0\17\42\1\u012d\7\42\3\0\12\100\3\0"+
    "\1\42\23\0\6\110\5\0\21\42\1\u012e\5\42\3\0"+
    "\12\100\3\0\1\42\23\0\6\110\5\0\1\u012f\26\42"+
    "\3\0\12\100\3\0\1\42\23\0\6\110\5\0\21\42"+
    "\1\u0130\5\42\3\0\12\100\3\0\1\42\23\0\6\110"+
    "\5\0\13\42\1\u0131\13\42\3\0\12\100\3\0\1\42"+
    "\23\0\6\110\5\0\1\u0132\26\42\3\0\12\100\3\0"+
    "\1\42\23\0\6\110\5\0\4\42\1\u0133\22\42\3\0"+
    "\12\100\3\0\1\42\23\0\6\110\5\0\4\42\1\u0134"+
    "\22\42\3\0\12\100\3\0\1\42\23\0\6\110\5\0"+
    "\24\42\1\u0135\2\42\3\0\12\100\3\0\1\42\23\0"+
    "\6\u0136\5\0\27\u0136\3\0\12\u0137\3\0\1\u0136\23\0"+
    "\6\u0138\5\0\27\u0138\3\0\12\u0137\3\0\1\u0138\23\0"+
    "\6\u0139\5\0\27\u0139\3\0\12\u0137\3\0\1\u0139\23\0"+
    "\6\u013a\5\0\27\u013a\3\0\12\u0137\3\0\1\u013a\23\0"+
    "\6\u013b\5\0\27\u013b\3\0\12\u0137\3\0\1\u013b\23\0"+
    "\6\u013c\5\0\27\u013c\3\0\12\u0137\3\0\1\u013c\12\66"+
    "\1\67\46\66\1\70\6\66\1\u013d\15\66\21\0\1\313"+
    "\1\0\1\u013e\5\u013f\76\0\1\313\1\0\1\u0140\5\u013f"+
    "\76\0\1\313\1\0\1\u0141\5\u0142\76\0\1\313\1\0"+
    "\1\u0143\5\u0142\76\0\1\313\1\0\1\u0144\5\u0142\76\0"+
    "\1\313\1\0\1\u0145\5\u0142\76\0\1\313\1\0\1\u0146"+
    "\5\u0142\100\0\6\u0147\5\0\27\77\3\0\12\100\3\0"+
    "\1\77\23\0\6\u0148\5\0\27\77\3\0\12\100\3\0"+
    "\1\77\23\0\6\u0149\5\0\27\u0149\3\0\12\u0149\3\0"+
    "\1\u0149\21\0\1\75\1\0\6\u014a\5\0\27\77\3\0"+
    "\12\100\3\0\1\77\23\0\6\110\5\0\4\42\1\u014b"+
    "\22\42\3\0\12\100\3\0\1\42\23\0\6\110\5\0"+
    "\23\42\1\u014c\3\42\3\0\12\100\3\0\1\42\23\0"+
    "\6\110\5\0\3\42\1\u014d\23\42\3\0\12\100\3\0"+
    "\1\42\23\0\6\110\5\0\22\42\1\u014e\4\42\3\0"+
    "\12\100\3\0\1\42\23\0\6\110\5\0\1\u014f\26\42"+
    "\3\0\12\100\3\0\1\42\23\0\6\110\5\0\1\u0150"+
    "\26\42\3\0\12\100\3\0\1\42\23\0\6\110\5\0"+
    "\22\42\1\u0151\4\42\3\0\12\100\3\0\1\42\23\0"+
    "\6\110\5\0\21\42\1\u0152\5\42\3\0\12\100\3\0"+
    "\1\42\23\0\6\110\5\0\2\42\1\u0153\24\42\3\0"+
    "\12\100\3\0\1\42\23\0\6\110\5\0\10\42\1\u0154"+
    "\16\42\3\0\12\100\3\0\1\42\23\0\6\u0155\5\0"+
    "\27\u0155\3\0\12\u0156\3\0\1\u0155\23\0\6\u0157\5\0"+
    "\27\u0157\3\0\12\u0156\3\0\1\u0157\23\0\6\u0158\5\0"+
    "\27\u0158\3\0\12\u0156\3\0\1\u0158\23\0\6\u0159\5\0"+
    "\27\u0159\3\0\12\u0156\3\0\1\u0159\23\0\6\u015a\5\0"+
    "\27\u015a\3\0\12\u0156\3\0\1\u015a\23\0\6\u015b\5\0"+
    "\27\u015b\3\0\12\u0156\3\0\1\u015b\23\0\6\u015c\5\0"+
    "\27\u015c\3\0\12\u0156\3\0\1\u015c\12\66\1\67\46\66"+
    "\1\70\10\66\1\u015d\13\66\21\0\1\313\1\0\1\u015e"+
    "\5\u015f\76\0\1\313\1\0\1\u0160\5\u015f\76\0\1\313"+
    "\1\0\1\u0161\5\u015f\76\0\1\313\1\0\1\u0162\5\u0163"+
    "\76\0\1\313\1\0\1\u0164\5\u0163\76\0\1\313\1\0"+
    "\1\u0165\5\u0163\76\0\1\313\1\0\1\u0166\5\u0163\76\0"+
    "\1\313\1\0\1\u0167\5\u0163\76\0\1\313\1\0\1\u0168"+
    "\5\u0163\100\0\6\u0169\5\0\27\77\3\0\12\100\3\0"+
    "\1\77\23\0\6\u016a\5\0\27\77\3\0\12\100\3\0"+
    "\1\77\23\0\6\u016b\5\0\27\u016b\3\0\12\u016b\3\0"+
    "\1\u016b\21\0\1\75\1\0\6\u016c\5\0\27\77\3\0"+
    "\12\100\3\0\1\77\23\0\6\110\5\0\16\42\1\u016d"+
    "\10\42\3\0\12\100\3\0\1\42\23\0\6\110\5\0"+
    "\1\u016e\26\42\3\0\12\100\3\0\1\42\23\0\6\110"+
    "\5\0\13\42\1\u016f\13\42\3\0\12\100\3\0\1\42"+
    "\23\0\6\110\5\0\15\42\1\u0170\11\42\3\0\12\100"+
    "\3\0\1\42\23\0\6\110\5\0\16\42\1\u0171\10\42"+
    "\3\0\12\100\3\0\1\42\23\0\6\110\5\0\7\42"+
    "\1\u0172\17\42\3\0\12\100\3\0\1\42\23\0\6\110"+
    "\5\0\4\42\1\u0173\22\42\3\0\12\100\3\0\1\42"+
    "\23\0\6\u0174\5\0\27\u0174\3\0\12\u0175\3\0\1\u0174"+
    "\23\0\6\u0176\5\0\27\u0176\3\0\12\u0175\3\0\1\u0176"+
    "\23\0\6\u0177\5\0\27\u0177\3\0\12\u0175\3\0\1\u0177"+
    "\23\0\6\u0178\5\0\27\u0178\3\0\12\u0175\3\0\1\u0178"+
    "\23\0\6\u0179\5\0\27\u0179\3\0\12\u0175\3\0\1\u0179"+
    "\23\0\6\u017a\5\0\27\u017a\3\0\12\u0175\3\0\1\u017a"+
    "\23\0\6\u017b\5\0\27\u017b\3\0\12\u0175\3\0\1\u017b"+
    "\23\0\6\u017c\5\0\27\u017c\3\0\12\u0175\3\0\1\u017c"+
    "\12\66\1\67\46\66\1\70\16\66\1\u017d\5\66\21\0"+
    "\1\313\1\0\1\u017e\5\u017f\76\0\1\313\1\0\1\u0180"+
    "\5\u017f\76\0\1\313\1\0\1\u0181\5\u017f\76\0\1\313"+
    "\1\0\1\u0182\5\u017f\76\0\1\313\1\0\1\u0183\5\u0184"+
    "\76\0\1\313\1\0\1\u0185\5\u0184\76\0\1\313\1\0"+
    "\1\u0186\5\u0184\76\0\1\313\1\0\1\u0187\5\u0184\76\0"+
    "\1\313\1\0\1\u0188\5\u0184\76\0\1\313\1\0\1\u0189"+
    "\5\u0184\76\0\1\313\1\0\1\u018a\5\u0184\100\0\6\u018b"+
    "\5\0\27\77\3\0\12\100\3\0\1\77\23\0\6\u018c"+
    "\5\0\27\77\3\0\12\100\3\0\1\77\23\0\6\u018d"+
    "\5\0\27\u018d\3\0\12\u018d\3\0\1\u018d\21\0\1\75"+
    "\1\0\6\u018e\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\23\0\6\110\5\0\21\42\1\u018f\5\42\3\0\12\100"+
    "\3\0\1\42\23\0\6\110\5\0\23\42\1\u0190\3\42"+
    "\3\0\12\100\3\0\1\42\23\0\6\110\5\0\1\u0191"+
    "\26\42\3\0\12\100\3\0\1\42\23\0\6\110\5\0"+
    "\21\42\1\u0192\5\42\3\0\12\100\3\0\1\42\23\0"+
    "\6\u0193\5\0\27\u0193\3\0\12\u0194\3\0\1\u0193\23\0"+
    "\6\u0195\5\0\27\u0195\3\0\12\u0194\3\0\1\u0195\23\0"+
    "\6\u0196\5\0\27\u0196\3\0\12\u0194\3\0\1\u0196\23\0"+
    "\6\u0197\5\0\27\u0197\3\0\12\u0194\3\0\1\u0197\23\0"+
    "\6\u0198\5\0\27\u0198\3\0\12\u0194\3\0\1\u0198\23\0"+
    "\6\u0199\5\0\27\u0199\3\0\12\u0194\3\0\1\u0199\23\0"+
    "\6\u019a\5\0\27\u019a\3\0\12\u0194\3\0\1\u019a\23\0"+
    "\6\u019b\5\0\27\u019b\3\0\12\u0194\3\0\1\u019b\23\0"+
    "\6\u019c\5\0\27\u019c\3\0\12\u0194\3\0\1\u019c\12\66"+
    "\1\67\46\66\1\70\17\66\1\u019d\4\66\21\0\1\313"+
    "\1\0\1\u019e\5\u019f\76\0\1\313\1\0\1\u01a0\5\u019f"+
    "\76\0\1\313\1\0\1\u01a1\5\u019f\76\0\1\313\1\0"+
    "\1\u01a2\5\u019f\76\0\1\313\1\0\1\u01a3\5\u019f\76\0"+
    "\1\313\1\0\1\u01a4\5\u01a5\76\0\1\313\1\0\1\u01a6"+
    "\5\u01a5\76\0\1\313\1\0\1\u01a7\5\u01a5\76\0\1\313"+
    "\1\0\1\u01a8\5\u01a5\76\0\1\313\1\0\1\u01a9\5\u01a5"+
    "\76\0\1\313\1\0\1\u01aa\5\u01a5\76\0\1\313\1\0"+
    "\1\u01ab\5\u01a5\76\0\1\313\1\0\1\u01ac\5\u01a5\100\0"+
    "\6\u01ad\5\0\27\77\3\0\12\100\3\0\1\77\23\0"+
    "\6\u01ae\5\0\27\77\3\0\12\100\3\0\1\77\23\0"+
    "\6\u01af\5\0\27\u01af\3\0\12\u01af\3\0\1\u01af\21\0"+
    "\1\75\1\0\6\u01b0\5\0\27\77\3\0\12\100\3\0"+
    "\1\77\23\0\6\110\5\0\4\42\1\u01b1\22\42\3\0"+
    "\12\100\3\0\1\42\23\0\6\110\5\0\3\42\1\u01b2"+
    "\23\42\3\0\12\100\3\0\1\42\23\0\6\u01b3\5\0"+
    "\27\u01b3\3\0\12\u01b4\3\0\1\u01b3\23\0\6\u01b5\5\0"+
    "\27\u01b5\3\0\12\u01b4\3\0\1\u01b5\23\0\6\u01b6\5\0"+
    "\27\u01b6\3\0\12\u01b4\3\0\1\u01b6\23\0\6\u01b7\5\0"+
    "\27\u01b7\3\0\12\u01b4\3\0\1\u01b7\23\0\6\u01b8\5\0"+
    "\27\u01b8\3\0\12\u01b4\3\0\1\u01b8\23\0\6\u01b9\5\0"+
    "\27\u01b9\3\0\12\u01b4\3\0\1\u01b9\23\0\6\u01ba\5\0"+
    "\27\u01ba\3\0\12\u01b4\3\0\1\u01ba\23\0\6\u01bb\5\0"+
    "\27\u01bb\3\0\12\u01b4\3\0\1\u01bb\23\0\6\u01bc\5\0"+
    "\27\u01bc\3\0\12\u01b4\3\0\1\u01bc\23\0\6\u01bd\5\0"+
    "\27\u01bd\3\0\12\u01b4\3\0\1\u01bd\12\66\1\67\26\66"+
    "\1\u01be\17\66\1\70\24\66\21\0\1\313\1\0\1\u01bf"+
    "\5\u01c0\76\0\1\313\1\0\1\u01c1\5\u01c0\76\0\1\313"+
    "\1\0\1\u01c2\5\u01c0\76\0\1\313\1\0\1\u01c3\5\u01c0"+
    "\76\0\1\313\1\0\1\u01c4\5\u01c0\76\0\1\313\1\0"+
    "\1\u01c5\5\u01c0\76\0\1\313\1\0\1\u01c6\5\u01c7\76\0"+
    "\1\313\1\0\1\u01c8\5\u01c7\76\0\1\313\1\0\1\u01c9"+
    "\5\u01c7\76\0\1\313\1\0\1\u01ca\5\u01c7\76\0\1\313"+
    "\1\0\1\u01cb\5\u01c7\76\0\1\313\1\0\1\u01cc\5\u01c7"+
    "\76\0\1\313\1\0\1\u01cd\5\u01c7\76\0\1\313\1\0"+
    "\1\u01ce\5\u01c7\76\0\1\313\1\0\1\u01cf\5\u01c7\100\0"+
    "\6\u01d0\5\0\27\77\3\0\12\100\3\0\1\77\23\0"+
    "\6\u01d1\5\0\27\77\3\0\12\100\3\0\1\77\23\0"+
    "\6\u01d2\5\0\27\u01d2\3\0\12\u01d2\3\0\1\u01d2\21\0"+
    "\1\75\1\0\6\u01d3\5\0\27\77\3\0\12\100\3\0"+
    "\1\77\23\0\6\110\5\0\1\u01d4\26\42\3\0\12\100"+
    "\3\0\1\42\23\0\6\u01d5\5\0\27\u01d5\3\0\12\u01d6"+
    "\3\0\1\u01d5\23\0\6\u01d7\5\0\27\u01d7\3\0\12\u01d6"+
    "\3\0\1\u01d7\23\0\6\u01d8\5\0\27\u01d8\3\0\12\u01d6"+
    "\3\0\1\u01d8\23\0\6\u01d9\5\0\27\u01d9\3\0\12\u01d6"+
    "\3\0\1\u01d9\23\0\6\u01da\5\0\27\u01da\3\0\12\u01d6"+
    "\3\0\1\u01da\23\0\6\u01db\5\0\27\u01db\3\0\12\u01d6"+
    "\3\0\1\u01db\23\0\6\u01dc\5\0\27\u01dc\3\0\12\u01d6"+
    "\3\0\1\u01dc\23\0\6\u01dd\5\0\27\u01dd\3\0\12\u01d6"+
    "\3\0\1\u01dd\23\0\6\u01de\5\0\27\u01de\3\0\12\u01d6"+
    "\3\0\1\u01de\23\0\6\u01df\5\0\27\u01df\3\0\12\u01d6"+
    "\3\0\1\u01df\23\0\6\u01e0\5\0\27\u01e0\3\0\12\u01d6"+
    "\3\0\1\u01e0\12\66\1\67\46\66\1\70\11\66\1\u01e1"+
    "\12\66\21\0\1\313\1\0\1\u01e2\5\u01e3\76\0\1\313"+
    "\1\0\1\u01e4\5\u01e3\76\0\1\313\1\0\1\u01e5\5\u01e3"+
    "\76\0\1\313\1\0\1\u01e6\5\u01e3\76\0\1\313\1\0"+
    "\1\u01e7\5\u01e3\76\0\1\313\1\0\1\u01e8\5\u01e3\76\0"+
    "\1\313\1\0\1\u01e9\5\u01e3\76\0\1\313\1\0\1\u01ea"+
    "\5\u01eb\76\0\1\313\1\0\1\u01ec\5\u01eb\76\0\1\313"+
    "\1\0\1\u01ed\5\u01eb\76\0\1\313\1\0\1\u01ee\5\u01eb"+
    "\76\0\1\313\1\0\1\u01ef\5\u01eb\76\0\1\313\1\0"+
    "\1\u01f0\5\u01eb\76\0\1\313\1\0\1\u01f1\5\u01eb\76\0"+
    "\1\313\1\0\1\u01f2\5\u01eb\76\0\1\313\1\0\1\u01f3"+
    "\5\u01eb\76\0\1\313\1\0\1\u01f4\5\u01eb\100\0\6\u01f5"+
    "\5\0\27\77\3\0\12\100\3\0\1\77\23\0\6\u01f6"+
    "\5\0\27\77\3\0\12\100\3\0\1\77\23\0\6\u01f7"+
    "\5\0\27\u01f7\3\0\12\u01f7\3\0\1\u01f7\21\0\1\75"+
    "\1\0\6\u01f8\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\23\0\6\u01f9\5\0\27\u01f9\3\0\12\u01fa\3\0\1\u01f9"+
    "\23\0\6\u01fb\5\0\27\u01fb\3\0\12\u01fa\3\0\1\u01fb"+
    "\23\0\6\u01fc\5\0\27\u01fc\3\0\12\u01fa\3\0\1\u01fc"+
    "\23\0\6\u01fd\5\0\27\u01fd\3\0\12\u01fa\3\0\1\u01fd"+
    "\23\0\6\u01fe\5\0\27\u01fe\3\0\12\u01fa\3\0\1\u01fe"+
    "\23\0\6\u01ff\5\0\27\u01ff\3\0\12\u01fa\3\0\1\u01ff"+
    "\23\0\6\u0200\5\0\27\u0200\3\0\12\u01fa\3\0\1\u0200"+
    "\23\0\6\u0201\5\0\27\u0201\3\0\12\u01fa\3\0\1\u0201"+
    "\23\0\6\u0202\5\0\27\u0202\3\0\12\u01fa\3\0\1\u0202"+
    "\23\0\6\u0203\5\0\27\u0203\3\0\12\u01fa\3\0\1\u0203"+
    "\23\0\6\u0204\5\0\27\u0204\3\0\12\u01fa\3\0\1\u0204"+
    "\23\0\6\u0205\5\0\27\u0205\3\0\12\u01fa\3\0\1\u0205"+
    "\12\66\1\67\36\66\1\u0206\7\66\1\70\24\66\21\0"+
    "\1\313\1\0\1\u0207\5\u0208\76\0\1\313\1\0\1\u0209"+
    "\5\u0208\76\0\1\313\1\0\1\u020a\5\u0208\76\0\1\313"+
    "\1\0\1\u020b\5\u0208\76\0\1\313\1\0\1\u020c\5\u0208"+
    "\76\0\1\313\1\0\1\u020d\5\u0208\76\0\1\313\1\0"+
    "\1\u020e\5\u0208\76\0\1\313\1\0\1\u020f\5\u0208\76\0"+
    "\1\313\1\0\1\u0210\5\u0211\76\0\1\313\1\0\1\u0212"+
    "\5\u0211\76\0\1\313\1\0\1\u0213\5\u0211\76\0\1\313"+
    "\1\0\1\u0214\5\u0211\76\0\1\313\1\0\1\u0215\5\u0211"+
    "\76\0\1\313\1\0\1\u0216\5\u0211\76\0\1\313\1\0"+
    "\1\u0217\5\u0211\76\0\1\313\1\0\1\u0218\5\u0211\76\0"+
    "\1\313\1\0\1\u0219\5\u0211\76\0\1\313\1\0\1\u021a"+
    "\5\u0211\76\0\1\313\1\0\1\u021b\5\u0211\100\0\6\u021c"+
    "\5\0\27\77\3\0\12\100\3\0\1\77\23\0\6\u021d"+
    "\5\0\27\77\3\0\12\100\3\0\1\77\23\0\6\u021e"+
    "\5\0\27\u021e\3\0\12\u021e\3\0\1\u021e\21\0\1\75"+
    "\1\0\6\u021f\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\23\0\6\u0220\5\0\27\u0220\3\0\12\u0221\3\0\1\u0220"+
    "\23\0\6\u0222\5\0\27\u0222\3\0\12\u0221\3\0\1\u0222"+
    "\23\0\6\u0223\5\0\27\u0223\3\0\12\u0221\3\0\1\u0223"+
    "\23\0\6\u0224\5\0\27\u0224\3\0\12\u0221\3\0\1\u0224"+
    "\23\0\6\u0225\5\0\27\u0225\3\0\12\u0221\3\0\1\u0225"+
    "\23\0\6\u0226\5\0\27\u0226\3\0\12\u0221\3\0\1\u0226"+
    "\23\0\6\u0227\5\0\27\u0227\3\0\12\u0221\3\0\1\u0227"+
    "\23\0\6\u0228\5\0\27\u0228\3\0\12\u0221\3\0\1\u0228"+
    "\23\0\6\u0229\5\0\27\u0229\3\0\12\u0221\3\0\1\u0229"+
    "\23\0\6\u022a\5\0\27\u022a\3\0\12\u0221\3\0\1\u022a"+
    "\23\0\6\u022b\5\0\27\u022b\3\0\12\u0221\3\0\1\u022b"+
    "\23\0\6\u022c\5\0\27\u022c\3\0\12\u0221\3\0\1\u022c"+
    "\23\0\6\u022d\5\0\27\u022d\3\0\12\u0221\3\0\1\u022d"+
    "\12\66\1\67\46\66\1\70\13\66\1\u022e\10\66\21\0"+
    "\1\313\1\0\1\u022f\5\u0230\76\0\1\313\1\0\1\u0231"+
    "\5\u0230\76\0\1\313\1\0\1\u0232\5\u0230\76\0\1\313"+
    "\1\0\1\u0233\5\u0230\76\0\1\313\1\0\1\u0234\5\u0230"+
    "\76\0\1\313\1\0\1\u0235\5\u0230\76\0\1\313\1\0"+
    "\1\u0236\5\u0230\76\0\1\313\1\0\1\u0237\5\u0230\76\0"+
    "\1\313\1\0\1\u0238\5\u0230\76\0\1\313\1\0\1\u0239"+
    "\5\u023a\76\0\1\313\1\0\1\u023b\5\u023a\76\0\1\313"+
    "\1\0\1\u023c\5\u023a\76\0\1\313\1\0\1\u023d\5\u023a"+
    "\76\0\1\313\1\0\1\u023e\5\u023a\76\0\1\313\1\0"+
    "\1\u023f\5\u023a\76\0\1\313\1\0\1\u0240\5\u023a\76\0"+
    "\1\313\1\0\1\u0241\5\u023a\76\0\1\313\1\0\1\u0242"+
    "\5\u023a\76\0\1\313\1\0\1\u0243\5\u023a\76\0\1\313"+
    "\1\0\1\u0244\5\u023a\76\0\1\313\1\0\1\u0245\5\u023a"+
    "\100\0\6\u0246\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\23\0\6\u0247\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\23\0\6\u0248\5\0\27\u0248\3\0\12\u0248\3\0\1\u0248"+
    "\21\0\1\75\1\0\6\u0249\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\u024a\5\0\27\u024a\3\0\12\u024b"+
    "\3\0\1\u024a\23\0\6\u024c\5\0\27\u024c\3\0\12\u024b"+
    "\3\0\1\u024c\23\0\6\u024d\5\0\27\u024d\3\0\12\u024b"+
    "\3\0\1\u024d\23\0\6\u024e\5\0\27\u024e\3\0\12\u024b"+
    "\3\0\1\u024e\23\0\6\u024f\5\0\27\u024f\3\0\12\u024b"+
    "\3\0\1\u024f\23\0\6\u0250\5\0\27\u0250\3\0\12\u024b"+
    "\3\0\1\u0250\23\0\6\u0251\5\0\27\u0251\3\0\12\u024b"+
    "\3\0\1\u0251\23\0\6\u0252\5\0\27\u0252\3\0\12\u024b"+
    "\3\0\1\u0252\23\0\6\u0253\5\0\27\u0253\3\0\12\u024b"+
    "\3\0\1\u0253\23\0\6\u0254\5\0\27\u0254\3\0\12\u024b"+
    "\3\0\1\u0254\23\0\6\u0255\5\0\27\u0255\3\0\12\u024b"+
    "\3\0\1\u0255\23\0\6\u0256\5\0\27\u0256\3\0\12\u024b"+
    "\3\0\1\u0256\23\0\6\u0257\5\0\27\u0257\3\0\12\u024b"+
    "\3\0\1\u0257\23\0\6\u0258\5\0\27\u0258\3\0\12\u024b"+
    "\3\0\1\u0258\12\66\1\67\46\66\1\70\15\66\1\u0259"+
    "\6\66\21\0\1\313\1\0\1\u025a\5\u025b\76\0\1\313"+
    "\1\0\1\u025c\5\u025b\76\0\1\313\1\0\1\u025d\5\u025b"+
    "\76\0\1\313\1\0\1\u025e\5\u025b\76\0\1\313\1\0"+
    "\1\u025f\5\u025b\76\0\1\313\1\0\1\u0260\5\u025b\76\0"+
    "\1\313\1\0\1\u0261\5\u025b\76\0\1\313\1\0\1\u0262"+
    "\5\u025b\76\0\1\313\1\0\1\u0263\5\u025b\76\0\1\313"+
    "\1\0\1\u0264\5\u025b\76\0\1\313\1\0\1\u0265\5\u0266"+
    "\76\0\1\313\1\0\1\u0267\5\u0266\76\0\1\313\1\0"+
    "\1\u0268\5\u0266\76\0\1\313\1\0\1\u0269\5\u0266\76\0"+
    "\1\313\1\0\1\u026a\5\u0266\76\0\1\313\1\0\1\u026b"+
    "\5\u0266\76\0\1\313\1\0\1\u026c\5\u0266\76\0\1\313"+
    "\1\0\1\u026d\5\u0266\76\0\1\313\1\0\1\u026e\5\u0266"+
    "\76\0\1\313\1\0\1\u026f\5\u0266\76\0\1\313\1\0"+
    "\1\u0270\5\u0266\76\0\1\313\1\0\1\u0271\5\u0266\76\0"+
    "\1\313\1\0\1\u0272\5\u0266\100\0\6\u0273\5\0\27\77"+
    "\3\0\12\100\3\0\1\77\23\0\6\u0274\5\0\27\77"+
    "\3\0\12\100\3\0\1\77\23\0\6\u0275\5\0\27\u0275"+
    "\3\0\12\u0275\3\0\1\u0275\21\0\1\75\1\0\6\u0276"+
    "\5\0\27\77\3\0\12\100\3\0\1\77\23\0\6\u0277"+
    "\5\0\27\u0277\3\0\12\u0278\3\0\1\u0277\23\0\6\u0279"+
    "\5\0\27\u0279\3\0\12\u0278\3\0\1\u0279\23\0\6\u027a"+
    "\5\0\27\u027a\3\0\12\u0278\3\0\1\u027a\23\0\6\u027b"+
    "\5\0\27\u027b\3\0\12\u0278\3\0\1\u027b\23\0\6\u027c"+
    "\5\0\27\u027c\3\0\12\u0278\3\0\1\u027c\23\0\6\u027d"+
    "\5\0\27\u027d\3\0\12\u0278\3\0\1\u027d\23\0\6\u027e"+
    "\5\0\27\u027e\3\0\12\u0278\3\0\1\u027e\23\0\6\u027f"+
    "\5\0\27\u027f\3\0\12\u0278\3\0\1\u027f\23\0\6\u0280"+
    "\5\0\27\u0280\3\0\12\u0278\3\0\1\u0280\23\0\6\u0281"+
    "\5\0\27\u0281\3\0\12\u0278\3\0\1\u0281\23\0\6\u0282"+
    "\5\0\27\u0282\3\0\12\u0278\3\0\1\u0282\23\0\6\u0283"+
    "\5\0\27\u0283\3\0\12\u0278\3\0\1\u0283\23\0\6\u0284"+
    "\5\0\27\u0284\3\0\12\u0278\3\0\1\u0284\23\0\6\u0285"+
    "\5\0\27\u0285\3\0\12\u0278\3\0\1\u0285\23\0\6\u0286"+
    "\5\0\27\u0286\3\0\12\u0278\3\0\1\u0286\12\66\1\67"+
    "\46\66\1\70\11\66\1\u0287\12\66\21\0\1\313\1\0"+
    "\1\u0288\5\u0289\76\0\1\313\1\0\1\u028a\5\u0289\76\0"+
    "\1\313\1\0\1\u028b\5\u0289\76\0\1\313\1\0\1\u028c"+
    "\5\u0289\76\0\1\313\1\0\1\u028d\5\u0289\76\0\1\313"+
    "\1\0\1\u028e\5\u0289\76\0\1\313\1\0\1\u028f\5\u0289"+
    "\76\0\1\313\1\0\1\u0290\5\u0289\76\0\1\313\1\0"+
    "\1\u0291\5\u0289\76\0\1\313\1\0\1\u0292\5\u0289\76\0"+
    "\1\313\1\0\1\u0293\5\u0289\76\0\1\313\1\0\1\u0294"+
    "\5\u0295\76\0\1\313\1\0\1\u0296\5\u0295\76\0\1\313"+
    "\1\0\1\u0297\5\u0295\76\0\1\313\1\0\1\u0298\5\u0295"+
    "\76\0\1\313\1\0\1\u0299\5\u0295\76\0\1\313\1\0"+
    "\1\u029a\5\u0295\76\0\1\313\1\0\1\u029b\5\u0295\76\0"+
    "\1\313\1\0\1\u029c\5\u0295\76\0\1\313\1\0\1\u029d"+
    "\5\u0295\76\0\1\313\1\0\1\u029e\5\u0295\76\0\1\313"+
    "\1\0\1\u029f\5\u0295\76\0\1\313\1\0\1\u02a0\5\u0295"+
    "\76\0\1\313\1\0\1\u02a1\5\u0295\76\0\1\313\1\0"+
    "\1\u02a2\5\u0295\100\0\6\u02a3\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\u02a4\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\u02a5\5\0\27\u02a5\3\0\12\u02a5"+
    "\3\0\1\u02a5\21\0\1\75\1\0\6\u02a6\5\0\27\77"+
    "\3\0\12\100\3\0\1\77\23\0\6\u02a7\5\0\27\u02a7"+
    "\3\0\12\u02a8\3\0\1\u02a7\23\0\6\u02a9\5\0\27\u02a9"+
    "\3\0\12\u02a8\3\0\1\u02a9\23\0\6\u02aa\5\0\27\u02aa"+
    "\3\0\12\u02a8\3\0\1\u02aa\23\0\6\u02ab\5\0\27\u02ab"+
    "\3\0\12\u02a8\3\0\1\u02ab\23\0\6\u02ac\5\0\27\u02ac"+
    "\3\0\12\u02a8\3\0\1\u02ac\23\0\6\u02ad\5\0\27\u02ad"+
    "\3\0\12\u02a8\3\0\1\u02ad\23\0\6\u02ae\5\0\27\u02ae"+
    "\3\0\12\u02a8\3\0\1\u02ae\23\0\6\u02af\5\0\27\u02af"+
    "\3\0\12\u02a8\3\0\1\u02af\23\0\6\u02b0\5\0\27\u02b0"+
    "\3\0\12\u02a8\3\0\1\u02b0\23\0\6\u02b1\5\0\27\u02b1"+
    "\3\0\12\u02a8\3\0\1\u02b1\23\0\6\u02b2\5\0\27\u02b2"+
    "\3\0\12\u02a8\3\0\1\u02b2\23\0\6\u02b3\5\0\27\u02b3"+
    "\3\0\12\u02a8\3\0\1\u02b3\23\0\6\u02b4\5\0\27\u02b4"+
    "\3\0\12\u02a8\3\0\1\u02b4\23\0\6\u02b5\5\0\27\u02b5"+
    "\3\0\12\u02a8\3\0\1\u02b5\23\0\6\u02b6\5\0\27\u02b6"+
    "\3\0\12\u02a8\3\0\1\u02b6\23\0\6\u02b7\5\0\27\u02b7"+
    "\3\0\12\u02a8\3\0\1\u02b7\12\66\1\67\46\66\1\70"+
    "\6\66\1\u02b8\15\66\21\0\1\313\1\0\1\u02b9\5\u02ba"+
    "\76\0\1\313\1\0\1\u02bb\5\u02ba\76\0\1\313\1\0"+
    "\1\u02bc\5\u02ba\76\0\1\313\1\0\1\u02bd\5\u02ba\76\0"+
    "\1\313\1\0\1\u02be\5\u02ba\76\0\1\313\1\0\1\u02bf"+
    "\5\u02ba\76\0\1\313\1\0\1\u02c0\5\u02ba\76\0\1\313"+
    "\1\0\1\u02c1\5\u02ba\76\0\1\313\1\0\1\u02c2\5\u02ba"+
    "\76\0\1\313\1\0\1\u02c3\5\u02ba\76\0\1\313\1\0"+
    "\1\u02c4\5\u02ba\76\0\1\313\1\0\1\u02c5\5\u02ba\76\0"+
    "\1\313\1\0\1\u02c6\5\u02c7\76\0\1\313\1\0\1\u02c8"+
    "\5\u02c7\76\0\1\313\1\0\1\u02c9\5\u02c7\76\0\1\313"+
    "\1\0\1\u02ca\5\u02c7\76\0\1\313\1\0\1\u02cb\5\u02c7"+
    "\76\0\1\313\1\0\1\u02cc\5\u02c7\76\0\1\313\1\0"+
    "\1\u02cd\5\u02c7\76\0\1\313\1\0\1\u02ce\5\u02c7\76\0"+
    "\1\313\1\0\1\u02cf\5\u02c7\76\0\1\313\1\0\1\u02d0"+
    "\5\u02c7\76\0\1\313\1\0\1\u02d1\5\u02c7\76\0\1\313"+
    "\1\0\1\u02d2\5\u02c7\76\0\1\313\1\0\1\u02d3\5\u02c7"+
    "\76\0\1\313\1\0\1\u02d4\5\u02c7\76\0\1\313\1\0"+
    "\1\u02d5\5\u02c7\100\0\6\u02d6\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\u02d7\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\u02d8\5\0\27\u02d8\3\0\12\u02d8"+
    "\3\0\1\u02d8\21\0\1\75\1\0\6\u02d9\5\0\27\77"+
    "\3\0\12\100\3\0\1\77\23\0\6\u02da\5\0\27\u02da"+
    "\3\0\12\u02db\3\0\1\u02da\23\0\6\u02dc\5\0\27\u02dc"+
    "\3\0\12\u02db\3\0\1\u02dc\23\0\6\u02dd\5\0\27\u02dd"+
    "\3\0\12\u02db\3\0\1\u02dd\23\0\6\u02de\5\0\27\u02de"+
    "\3\0\12\u02db\3\0\1\u02de\23\0\6\u02df\5\0\27\u02df"+
    "\3\0\12\u02db\3\0\1\u02df\23\0\6\u02e0\5\0\27\u02e0"+
    "\3\0\12\u02db\3\0\1\u02e0\23\0\6\u02e1\5\0\27\u02e1"+
    "\3\0\12\u02db\3\0\1\u02e1\23\0\6\u02e2\5\0\27\u02e2"+
    "\3\0\12\u02db\3\0\1\u02e2\23\0\6\u02e3\5\0\27\u02e3"+
    "\3\0\12\u02db\3\0\1\u02e3\23\0\6\u02e4\5\0\27\u02e4"+
    "\3\0\12\u02db\3\0\1\u02e4\23\0\6\u02e5\5\0\27\u02e5"+
    "\3\0\12\u02db\3\0\1\u02e5\23\0\6\u02e6\5\0\27\u02e6"+
    "\3\0\12\u02db\3\0\1\u02e6\23\0\6\u02e7\5\0\27\u02e7"+
    "\3\0\12\u02db\3\0\1\u02e7\23\0\6\u02e8\5\0\27\u02e8"+
    "\3\0\12\u02db\3\0\1\u02e8\23\0\6\u02e9\5\0\27\u02e9"+
    "\3\0\12\u02db\3\0\1\u02e9\23\0\6\u02ea\5\0\27\u02ea"+
    "\3\0\12\u02db\3\0\1\u02ea\23\0\6\u02eb\5\0\27\u02eb"+
    "\3\0\12\u02db\3\0\1\u02eb\21\0\1\313\1\0\1\u02ec"+
    "\5\u02ed\76\0\1\313\1\0\1\u02ee\5\u02ed\76\0\1\313"+
    "\1\0\1\u02ef\5\u02ed\76\0\1\313\1\0\1\u02f0\5\u02ed"+
    "\76\0\1\313\1\0\1\u02f1\5\u02ed\76\0\1\313\1\0"+
    "\1\u02f2\5\u02ed\76\0\1\313\1\0\1\u02f3\5\u02ed\76\0"+
    "\1\313\1\0\1\u02f4\5\u02ed\76\0\1\313\1\0\1\u02f5"+
    "\5\u02ed\76\0\1\313\1\0\1\u02f6\5\u02ed\76\0\1\313"+
    "\1\0\1\u02f7\5\u02ed\76\0\1\313\1\0\1\u02f8\5\u02ed"+
    "\76\0\1\313\1\0\1\u02f9\5\u02ed\76\0\1\313\1\0"+
    "\1\u02fa\5\u02fb\76\0\1\313\1\0\1\u02fc\5\u02fb\76\0"+
    "\1\313\1\0\1\u02fd\5\u02fb\76\0\1\313\1\0\1\u02fe"+
    "\5\u02fb\76\0\1\313\1\0\1\u02ff\5\u02fb\76\0\1\313"+
    "\1\0\1\u0300\5\u02fb\76\0\1\313\1\0\1\u0301\5\u02fb"+
    "\76\0\1\313\1\0\1\u0302\5\u02fb\76\0\1\313\1\0"+
    "\1\u0303\5\u02fb\76\0\1\313\1\0\1\u0304\5\u02fb\76\0"+
    "\1\313\1\0\1\u0305\5\u02fb\76\0\1\313\1\0\1\u0306"+
    "\5\u02fb\76\0\1\313\1\0\1\u0307\5\u02fb\76\0\1\313"+
    "\1\0\1\u0308\5\u02fb\76\0\1\313\1\0\1\u0309\5\u02fb"+
    "\76\0\1\313\1\0\1\u030a\5\u02fb\100\0\6\u030b\5\0"+
    "\27\77\3\0\12\100\3\0\1\77\23\0\6\u030c\5\0"+
    "\27\77\3\0\12\100\3\0\1\77\23\0\6\u030d\5\0"+
    "\27\u030d\3\0\12\u030d\3\0\1\u030d\21\0\1\75\1\0"+
    "\6\u030e\5\0\27\77\3\0\12\100\3\0\1\77\23\0"+
    "\6\u030f\5\0\27\u030f\3\0\12\u0310\3\0\1\u030f\23\0"+
    "\6\u0311\5\0\27\u0311\3\0\12\u0310\3\0\1\u0311\23\0"+
    "\6\u0312\5\0\27\u0312\3\0\12\u0310\3\0\1\u0312\23\0"+
    "\6\u0313\5\0\27\u0313\3\0\12\u0310\3\0\1\u0313\23\0"+
    "\6\u0314\5\0\27\u0314\3\0\12\u0310\3\0\1\u0314\23\0"+
    "\6\u0315\5\0\27\u0315\3\0\12\u0310\3\0\1\u0315\23\0"+
    "\6\u0316\5\0\27\u0316\3\0\12\u0310\3\0\1\u0316\23\0"+
    "\6\u0317\5\0\27\u0317\3\0\12\u0310\3\0\1\u0317\23\0"+
    "\6\u0318\5\0\27\u0318\3\0\12\u0310\3\0\1\u0318\23\0"+
    "\6\u0319\5\0\27\u0319\3\0\12\u0310\3\0\1\u0319\23\0"+
    "\6\u031a\5\0\27\u031a\3\0\12\u0310\3\0\1\u031a\23\0"+
    "\6\u031b\5\0\27\u031b\3\0\12\u0310\3\0\1\u031b\23\0"+
    "\6\u031c\5\0\27\u031c\3\0\12\u0310\3\0\1\u031c\23\0"+
    "\6\u031d\5\0\27\u031d\3\0\12\u0310\3\0\1\u031d\23\0"+
    "\6\u031e\5\0\27\u031e\3\0\12\u0310\3\0\1\u031e\23\0"+
    "\6\u031f\5\0\27\u031f\3\0\12\u0310\3\0\1\u031f\23\0"+
    "\6\u0320\5\0\27\u0320\3\0\12\u0310\3\0\1\u0320\23\0"+
    "\6\u0321\5\0\27\u0321\3\0\12\u0310\3\0\1\u0321\21\0"+
    "\1\313\1\0\1\u0322\5\u0323\76\0\1\313\1\0\1\u0324"+
    "\5\u0323\76\0\1\313\1\0\1\u0325\5\u0323\76\0\1\313"+
    "\1\0\1\u0326\5\u0323\76\0\1\313\1\0\1\u0327\5\u0323"+
    "\76\0\1\313\1\0\1\u0328\5\u0323\76\0\1\313\1\0"+
    "\1\u0329\5\u0323\76\0\1\313\1\0\1\u032a\5\u0323\76\0"+
    "\1\313\1\0\1\u032b\5\u0323\76\0\1\313\1\0\1\u032c"+
    "\5\u0323\76\0\1\313\1\0\1\u032d\5\u0323\76\0\1\313"+
    "\1\0\1\u032e\5\u0323\76\0\1\313\1\0\1\u032f\5\u0323"+
    "\76\0\1\313\1\0\1\u0330\5\u0323\76\0\1\313\1\0"+
    "\1\u0331\5\u0332\76\0\1\313\1\0\1\u0333\5\u0332\76\0"+
    "\1\313\1\0\1\u0334\5\u0332\76\0\1\313\1\0\1\u0335"+
    "\5\u0332\76\0\1\313\1\0\1\u0336\5\u0332\76\0\1\313"+
    "\1\0\1\u0337\5\u0332\76\0\1\313\1\0\1\u0338\5\u0332"+
    "\76\0\1\313\1\0\1\u0339\5\u0332\76\0\1\313\1\0"+
    "\1\u033a\5\u0332\76\0\1\313\1\0\1\u033b\5\u0332\76\0"+
    "\1\313\1\0\1\u033c\5\u0332\76\0\1\313\1\0\1\u033d"+
    "\5\u0332\76\0\1\313\1\0\1\u033e\5\u0332\76\0\1\313"+
    "\1\0\1\u033f\5\u0332\76\0\1\313\1\0\1\u0340\5\u0332"+
    "\76\0\1\313\1\0\1\u0341\5\u0332\76\0\1\313\1\0"+
    "\1\u0342\5\u0332\100\0\6\u0343\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\u0344\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\u0345\5\0\27\u0345\3\0\12\u0345"+
    "\3\0\1\u0345\21\0\1\75\1\0\6\u0346\5\0\27\77"+
    "\3\0\12\100\3\0\1\77\23\0\6\u0347\5\0\27\u0347"+
    "\3\0\12\u0348\3\0\1\u0347\23\0\6\u0349\5\0\27\u0349"+
    "\3\0\12\u0348\3\0\1\u0349\23\0\6\u034a\5\0\27\u034a"+
    "\3\0\12\u0348\3\0\1\u034a\23\0\6\u034b\5\0\27\u034b"+
    "\3\0\12\u0348\3\0\1\u034b\23\0\6\u034c\5\0\27\u034c"+
    "\3\0\12\u0348\3\0\1\u034c\23\0\6\u034d\5\0\27\u034d"+
    "\3\0\12\u0348\3\0\1\u034d\23\0\6\u034e\5\0\27\u034e"+
    "\3\0\12\u0348\3\0\1\u034e\23\0\6\u034f\5\0\27\u034f"+
    "\3\0\12\u0348\3\0\1\u034f\23\0\6\u0350\5\0\27\u0350"+
    "\3\0\12\u0348\3\0\1\u0350\23\0\6\u0351\5\0\27\u0351"+
    "\3\0\12\u0348\3\0\1\u0351\23\0\6\u0352\5\0\27\u0352"+
    "\3\0\12\u0348\3\0\1\u0352\23\0\6\u0353\5\0\27\u0353"+
    "\3\0\12\u0348\3\0\1\u0353\23\0\6\u0354\5\0\27\u0354"+
    "\3\0\12\u0348\3\0\1\u0354\23\0\6\u0355\5\0\27\u0355"+
    "\3\0\12\u0348\3\0\1\u0355\23\0\6\u0356\5\0\27\u0356"+
    "\3\0\12\u0348\3\0\1\u0356\23\0\6\u0357\5\0\27\u0357"+
    "\3\0\12\u0348\3\0\1\u0357\23\0\6\u0358\5\0\27\u0358"+
    "\3\0\12\u0348\3\0\1\u0358\23\0\6\u0359\5\0\27\u0359"+
    "\3\0\12\u0348\3\0\1\u0359\23\0\6\u035a\5\0\27\u035a"+
    "\3\0\12\u0348\3\0\1\u035a\21\0\1\313\1\0\1\u035b"+
    "\5\u035c\76\0\1\313\1\0\1\u035d\5\u035c\76\0\1\313"+
    "\1\0\1\u035e\5\u035c\76\0\1\313\1\0\1\u035f\5\u035c"+
    "\76\0\1\313\1\0\1\u0360\5\u035c\76\0\1\313\1\0"+
    "\1\u0361\5\u035c\76\0\1\313\1\0\1\u0362\5\u035c\76\0"+
    "\1\313\1\0\1\u0363\5\u035c\76\0\1\313\1\0\1\u0364"+
    "\5\u035c\76\0\1\313\1\0\1\u0365\5\u035c\76\0\1\313"+
    "\1\0\1\u0366\5\u035c\76\0\1\313\1\0\1\u0367\5\u035c"+
    "\76\0\1\313\1\0\1\u0368\5\u035c\76\0\1\313\1\0"+
    "\1\u0369\5\u035c\76\0\1\313\1\0\1\u036a\5\u035c\76\0"+
    "\1\313\1\0\1\u036b\5\u036c\76\0\1\313\1\0\1\u036d"+
    "\5\u036c\76\0\1\313\1\0\1\u036e\5\u036c\76\0\1\313"+
    "\1\0\1\u036f\5\u036c\76\0\1\313\1\0\1\u0370\5\u036c"+
    "\76\0\1\313\1\0\1\u0371\5\u036c\76\0\1\313\1\0"+
    "\1\u0372\5\u036c\76\0\1\313\1\0\1\u0373\5\u036c\76\0"+
    "\1\313\1\0\1\u0374\5\u036c\76\0\1\313\1\0\1\u0375"+
    "\5\u036c\76\0\1\313\1\0\1\u0376\5\u036c\76\0\1\313"+
    "\1\0\1\u0377\5\u036c\76\0\1\313\1\0\1\u0378\5\u036c"+
    "\76\0\1\313\1\0\1\u0379\5\u036c\76\0\1\313\1\0"+
    "\1\u037a\5\u036c\76\0\1\313\1\0\1\u037b\5\u036c\76\0"+
    "\1\313\1\0\1\u037c\5\u036c\76\0\1\313\1\0\1\u037d"+
    "\5\u036c\100\0\6\u037e\5\0\27\77\3\0\12\100\3\0"+
    "\1\77\23\0\6\u037f\5\0\27\77\3\0\12\100\3\0"+
    "\1\77\23\0\6\u0380\5\0\27\u0380\3\0\12\u0380\3\0"+
    "\1\u0380\23\0\6\u0381\5\0\27\77\3\0\12\100\3\0"+
    "\1\77\23\0\6\u0382\5\0\27\u0382\3\0\12\u0383\3\0"+
    "\1\u0382\23\0\6\u0384\5\0\27\u0384\3\0\12\u0383\3\0"+
    "\1\u0384\23\0\6\u0385\5\0\27\u0385\3\0\12\u0383\3\0"+
    "\1\u0385\23\0\6\u0386\5\0\27\u0386\3\0\12\u0383\3\0"+
    "\1\u0386\23\0\6\u0387\5\0\27\u0387\3\0\12\u0383\3\0"+
    "\1\u0387\23\0\6\u0388\5\0\27\u0388\3\0\12\u0383\3\0"+
    "\1\u0388\23\0\6\u0389\5\0\27\u0389\3\0\12\u0383\3\0"+
    "\1\u0389\23\0\6\u038a\5\0\27\u038a\3\0\12\u0383\3\0"+
    "\1\u038a\23\0\6\u038b\5\0\27\u038b\3\0\12\u0383\3\0"+
    "\1\u038b\23\0\6\u038c\5\0\27\u038c\3\0\12\u0383\3\0"+
    "\1\u038c\23\0\6\u038d\5\0\27\u038d\3\0\12\u0383\3\0"+
    "\1\u038d\23\0\6\u038e\5\0\27\u038e\3\0\12\u0383\3\0"+
    "\1\u038e\23\0\6\u038f\5\0\27\u038f\3\0\12\u0383\3\0"+
    "\1\u038f\23\0\6\u0390\5\0\27\u0390\3\0\12\u0383\3\0"+
    "\1\u0390\23\0\6\u0391\5\0\27\u0391\3\0\12\u0383\3\0"+
    "\1\u0391\23\0\6\u0392\5\0\27\u0392\3\0\12\u0383\3\0"+
    "\1\u0392\23\0\6\u0393\5\0\27\u0393\3\0\12\u0383\3\0"+
    "\1\u0393\23\0\6\u0394\5\0\27\u0394\3\0\12\u0383\3\0"+
    "\1\u0394\23\0\6\u0395\5\0\27\u0395\3\0\12\u0383\3\0"+
    "\1\u0395\23\0\6\u0396\5\0\27\u0396\3\0\12\u0383\3\0"+
    "\1\u0396\21\0\1\313\1\0\1\u0397\5\u0398\76\0\1\313"+
    "\1\0\1\u0399\5\u0398\76\0\1\313\1\0\1\u039a\5\u0398"+
    "\76\0\1\313\1\0\1\u039b\5\u0398\76\0\1\313\1\0"+
    "\1\u039c\5\u0398\76\0\1\313\1\0\1\u039d\5\u0398\76\0"+
    "\1\313\1\0\1\u039e\5\u0398\76\0\1\313\1\0\1\u039f"+
    "\5\u0398\76\0\1\313\1\0\1\u03a0\5\u0398\76\0\1\313"+
    "\1\0\1\u03a1\5\u0398\76\0\1\313\1\0\1\u03a2\5\u0398"+
    "\76\0\1\313\1\0\1\u03a3\5\u0398\76\0\1\313\1\0"+
    "\1\u03a4\5\u0398\76\0\1\313\1\0\1\u03a5\5\u0398\76\0"+
    "\1\313\1\0\1\u03a6\5\u0398\76\0\1\313\1\0\1\u03a7"+
    "\5\u0398\76\0\1\u03a8\105\0\1\u03a8\1\0\6\u036d\76\0"+
    "\1\u03a8\1\0\6\u036e\76\0\1\u03a8\1\0\6\u036f\76\0"+
    "\1\u03a8\1\0\6\u0370\76\0\1\u03a8\1\0\6\u0371\76\0"+
    "\1\u03a8\1\0\6\u0372\76\0\1\u03a8\1\0\6\u0373\76\0"+
    "\1\u03a8\1\0\6\u0374\76\0\1\u03a8\1\0\6\u0375\76\0"+
    "\1\u03a8\1\0\6\u0376\76\0\1\u03a8\1\0\6\u0377\76\0"+
    "\1\u03a8\1\0\6\u0378\76\0\1\u03a8\1\0\6\u0379\76\0"+
    "\1\u03a8\1\0\6\u037a\76\0\1\u03a8\1\0\6\u037b\76\0"+
    "\1\u03a8\1\0\6\u037c\76\0\1\u03a8\1\0\6\u037d\76\0"+
    "\1\u03a8\1\0\6\u036b\100\0\6\u03a9\5\0\27\77\3\0"+
    "\12\100\3\0\1\77\23\0\6\u03aa\5\0\27\77\3\0"+
    "\12\100\3\0\1\77\23\0\6\u03ab\5\0\27\u03ab\3\0"+
    "\12\u03ab\3\0\1\u03ab\23\0\6\u03ac\5\0\27\77\3\0"+
    "\12\100\3\0\1\77\23\0\6\u03ad\5\0\27\u03ad\3\0"+
    "\12\u03ae\3\0\1\u03ad\23\0\6\u03af\5\0\27\u03af\3\0"+
    "\12\u03ae\3\0\1\u03af\23\0\6\u03b0\5\0\27\u03b0\3\0"+
    "\12\u03ae\3\0\1\u03b0\23\0\6\u03b1\5\0\27\u03b1\3\0"+
    "\12\u03ae\3\0\1\u03b1\23\0\6\u03b2\5\0\27\u03b2\3\0"+
    "\12\u03ae\3\0\1\u03b2\23\0\6\u03b3\5\0\27\u03b3\3\0"+
    "\12\u03ae\3\0\1\u03b3\23\0\6\u03b4\5\0\27\u03b4\3\0"+
    "\12\u03ae\3\0\1\u03b4\23\0\6\u03b5\5\0\27\u03b5\3\0"+
    "\12\u03ae\3\0\1\u03b5\23\0\6\u03b6\5\0\27\u03b6\3\0"+
    "\12\u03ae\3\0\1\u03b6\23\0\6\u03b7\5\0\27\u03b7\3\0"+
    "\12\u03ae\3\0\1\u03b7\23\0\6\u03b8\5\0\27\u03b8\3\0"+
    "\12\u03ae\3\0\1\u03b8\23\0\6\u03b9\5\0\27\u03b9\3\0"+
    "\12\u03ae\3\0\1\u03b9\23\0\6\u03ba\5\0\27\u03ba\3\0"+
    "\12\u03ae\3\0\1\u03ba\23\0\6\u03bb\5\0\27\u03bb\3\0"+
    "\12\u03ae\3\0\1\u03bb\23\0\6\u03bc\5\0\27\u03bc\3\0"+
    "\12\u03ae\3\0\1\u03bc\23\0\6\u03bd\5\0\27\u03bd\3\0"+
    "\12\u03ae\3\0\1\u03bd\23\0\6\u03be\5\0\27\u03be\3\0"+
    "\12\u03ae\3\0\1\u03be\23\0\6\u03bf\5\0\27\u03bf\3\0"+
    "\12\u03ae\3\0\1\u03bf\23\0\6\u03c0\5\0\27\u03c0\3\0"+
    "\12\u03ae\3\0\1\u03c0\23\0\6\u03c1\5\0\27\u03c1\3\0"+
    "\12\u03ae\3\0\1\u03c1\23\0\6\u03c2\5\0\27\u03c2\3\0"+
    "\12\u03ae\3\0\1\u03c2\21\0\1\313\1\0\1\u03c3\5\u03c4"+
    "\76\0\1\313\1\0\1\u03c5\5\u03c4\76\0\1\313\1\0"+
    "\1\u03c6\5\u03c4\76\0\1\313\1\0\1\u03c7\5\u03c4\76\0"+
    "\1\313\1\0\1\u03c8\5\u03c4\76\0\1\313\1\0\1\u03c9"+
    "\5\u03c4\76\0\1\313\1\0\1\u03ca\5\u03c4\76\0\1\313"+
    "\1\0\1\u03cb\5\u03c4\76\0\1\313\1\0\1\u03cc\5\u03c4"+
    "\76\0\1\313\1\0\1\u03cd\5\u03c4\76\0\1\313\1\0"+
    "\1\u03ce\5\u03c4\76\0\1\313\1\0\1\u03cf\5\u03c4\76\0"+
    "\1\313\1\0\1\u03d0\5\u03c4\76\0\1\313\1\0\1\u03d1"+
    "\5\u03c4\76\0\1\313\1\0\1\u03d2\5\u03c4\76\0\1\313"+
    "\1\0\1\u03d3\5\u03c4\76\0\1\313\1\0\1\u03d4\5\u03c4"+
    "\100\0\6\u03d5\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\23\0\6\u03d6\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\23\0\6\u03d7\5\0\27\u03d7\3\0\12\u03d7\3\0\1\u03d7"+
    "\23\0\6\u03d8\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\23\0\6\u03d9\5\0\27\u03d9\3\0\12\u03da\3\0\1\u03d9"+
    "\23\0\6\u03db\5\0\27\u03db\3\0\12\u03da\3\0\1\u03db"+
    "\23\0\6\u03dc\5\0\27\u03dc\3\0\12\u03da\3\0\1\u03dc"+
    "\23\0\6\u03dd\5\0\27\u03dd\3\0\12\u03da\3\0\1\u03dd"+
    "\23\0\6\u03de\5\0\27\u03de\3\0\12\u03da\3\0\1\u03de"+
    "\23\0\6\u03df\5\0\27\u03df\3\0\12\u03da\3\0\1\u03df"+
    "\23\0\6\u03e0\5\0\27\u03e0\3\0\12\u03da\3\0\1\u03e0"+
    "\23\0\6\u03e1\5\0\27\u03e1\3\0\12\u03da\3\0\1\u03e1"+
    "\23\0\6\u03e2\5\0\27\u03e2\3\0\12\u03da\3\0\1\u03e2"+
    "\23\0\6\u03e3\5\0\27\u03e3\3\0\12\u03da\3\0\1\u03e3"+
    "\23\0\6\u03e4\5\0\27\u03e4\3\0\12\u03da\3\0\1\u03e4"+
    "\23\0\6\u03e5\5\0\27\u03e5\3\0\12\u03da\3\0\1\u03e5"+
    "\23\0\6\u03e6\5\0\27\u03e6\3\0\12\u03da\3\0\1\u03e6"+
    "\23\0\6\u03e7\5\0\27\u03e7\3\0\12\u03da\3\0\1\u03e7"+
    "\23\0\6\u03e8\5\0\27\u03e8\3\0\12\u03da\3\0\1\u03e8"+
    "\23\0\6\u03e9\5\0\27\u03e9\3\0\12\u03da\3\0\1\u03e9"+
    "\23\0\6\u03ea\5\0\27\u03ea\3\0\12\u03da\3\0\1\u03ea"+
    "\23\0\6\u03eb\5\0\27\u03eb\3\0\12\u03da\3\0\1\u03eb"+
    "\23\0\6\u03ec\5\0\27\u03ec\3\0\12\u03da\3\0\1\u03ec"+
    "\23\0\6\u03ed\5\0\27\u03ed\3\0\12\u03da\3\0\1\u03ed"+
    "\23\0\6\u03ee\5\0\27\u03ee\3\0\12\u03da\3\0\1\u03ee"+
    "\23\0\6\u03ef\5\0\27\u03ef\3\0\12\u03da\3\0\1\u03ef"+
    "\23\0\6\u03f0\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\23\0\6\u03f1\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\23\0\6\u03f2\5\0\27\u03f2\3\0\12\u03f2\3\0\1\u03f2"+
    "\23\0\6\u03f3\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\23\0\6\u03f4\5\0\27\u03f4\3\0\12\u03f5\3\0\1\u03f4"+
    "\23\0\6\u03f6\5\0\27\u03f6\3\0\12\u03f5\3\0\1\u03f6"+
    "\23\0\6\u03f7\5\0\27\u03f7\3\0\12\u03f5\3\0\1\u03f7"+
    "\23\0\6\u03f8\5\0\27\u03f8\3\0\12\u03f5\3\0\1\u03f8"+
    "\23\0\6\u03f9\5\0\27\u03f9\3\0\12\u03f5\3\0\1\u03f9"+
    "\23\0\6\u03fa\5\0\27\u03fa\3\0\12\u03f5\3\0\1\u03fa"+
    "\23\0\6\u03fb\5\0\27\u03fb\3\0\12\u03f5\3\0\1\u03fb"+
    "\23\0\6\u03fc\5\0\27\u03fc\3\0\12\u03f5\3\0\1\u03fc"+
    "\23\0\6\u03fd\5\0\27\u03fd\3\0\12\u03f5\3\0\1\u03fd"+
    "\23\0\6\u03fe\5\0\27\u03fe\3\0\12\u03f5\3\0\1\u03fe"+
    "\23\0\6\u03ff\5\0\27\u03ff\3\0\12\u03f5\3\0\1\u03ff"+
    "\23\0\6\u0400\5\0\27\u0400\3\0\12\u03f5\3\0\1\u0400"+
    "\23\0\6\u0401\5\0\27\u0401\3\0\12\u03f5\3\0\1\u0401"+
    "\23\0\6\u0402\5\0\27\u0402\3\0\12\u03f5\3\0\1\u0402"+
    "\23\0\6\u0403\5\0\27\u0403\3\0\12\u03f5\3\0\1\u0403"+
    "\23\0\6\u0404\5\0\27\u0404\3\0\12\u03f5\3\0\1\u0404"+
    "\23\0\6\u0405\5\0\27\u0405\3\0\12\u03f5\3\0\1\u0405"+
    "\23\0\6\u0406\5\0\27\u0406\3\0\12\u03f5\3\0\1\u0406"+
    "\23\0\6\u0407\5\0\27\u0407\3\0\12\u03f5\3\0\1\u0407"+
    "\23\0\6\u0408\5\0\27\u0408\3\0\12\u03f5\3\0\1\u0408"+
    "\23\0\6\u0409\5\0\27\u0409\3\0\12\u03f5\3\0\1\u0409"+
    "\23\0\6\u040a\5\0\27\u040a\3\0\12\u03f5\3\0\1\u040a"+
    "\23\0\6\u040b\5\0\27\u040b\3\0\12\u03f5\3\0\1\u040b"+
    "\23\0\6\u040c\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\23\0\6\u040d\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\23\0\6\u040e\5\0\27\u040e\3\0\12\u040e\3\0\1\u040e"+
    "\23\0\6\u040f\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\23\0\6\u0410\5\0\27\u0410\3\0\12\u0411\3\0\1\u0410"+
    "\23\0\6\u0412\5\0\27\u0412\3\0\12\u0411\3\0\1\u0412"+
    "\23\0\6\u0413\5\0\27\u0413\3\0\12\u0411\3\0\1\u0413"+
    "\23\0\6\u0414\5\0\27\u0414\3\0\12\u0411\3\0\1\u0414"+
    "\23\0\6\u0415\5\0\27\u0415\3\0\12\u0411\3\0\1\u0415"+
    "\23\0\6\u0416\5\0\27\u0416\3\0\12\u0411\3\0\1\u0416"+
    "\23\0\6\u0417\5\0\27\u0417\3\0\12\u0411\3\0\1\u0417"+
    "\23\0\6\u0418\5\0\27\u0418\3\0\12\u0411\3\0\1\u0418"+
    "\23\0\6\u0419\5\0\27\u0419\3\0\12\u0411\3\0\1\u0419"+
    "\23\0\6\u041a\5\0\27\u041a\3\0\12\u0411\3\0\1\u041a"+
    "\23\0\6\u041b\5\0\27\u041b\3\0\12\u0411\3\0\1\u041b"+
    "\23\0\6\u041c\5\0\27\u041c\3\0\12\u0411\3\0\1\u041c"+
    "\23\0\6\u041d\5\0\27\u041d\3\0\12\u0411\3\0\1\u041d"+
    "\23\0\6\u041e\5\0\27\u041e\3\0\12\u0411\3\0\1\u041e"+
    "\23\0\6\u041f\5\0\27\u041f\3\0\12\u0411\3\0\1\u041f"+
    "\23\0\6\u0420\5\0\27\u0420\3\0\12\u0411\3\0\1\u0420"+
    "\23\0\6\u0421\5\0\27\u0421\3\0\12\u0411\3\0\1\u0421"+
    "\23\0\6\u0422\5\0\27\u0422\3\0\12\u0411\3\0\1\u0422"+
    "\23\0\6\u0423\5\0\27\u0423\3\0\12\u0411\3\0\1\u0423"+
    "\23\0\6\u0424\5\0\27\u0424\3\0\12\u0411\3\0\1\u0424"+
    "\23\0\6\u0425\5\0\27\u0425\3\0\12\u0411\3\0\1\u0425"+
    "\23\0\6\u0426\5\0\27\u0426\3\0\12\u0411\3\0\1\u0426"+
    "\23\0\6\u0427\5\0\27\u0427\3\0\12\u0411\3\0\1\u0427"+
    "\23\0\6\u0428\5\0\27\u0428\3\0\12\u0411\3\0\1\u0428"+
    "\23\0\6\u0429\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\23\0\6\u042a\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\23\0\6\u042b\5\0\27\u042b\3\0\12\u042b\3\0\1\u042b"+
    "\23\0\6\u042c\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\23\0\6\u042d\5\0\27\u042d\3\0\12\u042e\3\0\1\u042d"+
    "\23\0\6\u042f\5\0\27\u042f\3\0\12\u042e\3\0\1\u042f"+
    "\23\0\6\u0430\5\0\27\u0430\3\0\12\u042e\3\0\1\u0430"+
    "\23\0\6\u0431\5\0\27\u0431\3\0\12\u042e\3\0\1\u0431"+
    "\23\0\6\u0432\5\0\27\u0432\3\0\12\u042e\3\0\1\u0432"+
    "\23\0\6\u0433\5\0\27\u0433\3\0\12\u042e\3\0\1\u0433"+
    "\23\0\6\u0434\5\0\27\u0434\3\0\12\u042e\3\0\1\u0434"+
    "\23\0\6\u0435\5\0\27\u0435\3\0\12\u042e\3\0\1\u0435"+
    "\23\0\6\u0436\5\0\27\u0436\3\0\12\u042e\3\0\1\u0436"+
    "\23\0\6\u0437\5\0\27\u0437\3\0\12\u042e\3\0\1\u0437"+
    "\23\0\6\u0438\5\0\27\u0438\3\0\12\u042e\3\0\1\u0438"+
    "\23\0\6\u0439\5\0\27\u0439\3\0\12\u042e\3\0\1\u0439"+
    "\23\0\6\u043a\5\0\27\u043a\3\0\12\u042e\3\0\1\u043a"+
    "\23\0\6\u043b\5\0\27\u043b\3\0\12\u042e\3\0\1\u043b"+
    "\23\0\6\u043c\5\0\27\u043c\3\0\12\u042e\3\0\1\u043c"+
    "\23\0\6\u043d\5\0\27\u043d\3\0\12\u042e\3\0\1\u043d"+
    "\23\0\6\u043e\5\0\27\u043e\3\0\12\u042e\3\0\1\u043e"+
    "\23\0\6\u043f\5\0\27\u043f\3\0\12\u042e\3\0\1\u043f"+
    "\23\0\6\u0440\5\0\27\u0440\3\0\12\u042e\3\0\1\u0440"+
    "\23\0\6\u0441\5\0\27\u0441\3\0\12\u042e\3\0\1\u0441"+
    "\23\0\6\u0442\5\0\27\u0442\3\0\12\u042e\3\0\1\u0442"+
    "\23\0\6\u0443\5\0\27\u0443\3\0\12\u042e\3\0\1\u0443"+
    "\23\0\6\u0444\5\0\27\u0444\3\0\12\u042e\3\0\1\u0444"+
    "\23\0\6\u0445\5\0\27\u0445\3\0\12\u042e\3\0\1\u0445"+
    "\23\0\6\u0446\5\0\27\u0446\3\0\12\u042e\3\0\1\u0446"+
    "\23\0\6\u0447\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\23\0\6\u0448\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\23\0\6\u0449\5\0\27\u0449\3\0\12\u0449\3\0\1\u0449"+
    "\23\0\6\u044a\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\23\0\6\u044b\5\0\27\u044b\3\0\12\u044c\3\0\1\u044b"+
    "\23\0\6\u044d\5\0\27\u044d\3\0\12\u044c\3\0\1\u044d"+
    "\23\0\6\u044e\5\0\27\u044e\3\0\12\u044c\3\0\1\u044e"+
    "\23\0\6\u044f\5\0\27\u044f\3\0\12\u044c\3\0\1\u044f"+
    "\23\0\6\u0450\5\0\27\u0450\3\0\12\u044c\3\0\1\u0450"+
    "\23\0\6\u0451\5\0\27\u0451\3\0\12\u044c\3\0\1\u0451"+
    "\23\0\6\u0452\5\0\27\u0452\3\0\12\u044c\3\0\1\u0452"+
    "\23\0\6\u0453\5\0\27\u0453\3\0\12\u044c\3\0\1\u0453"+
    "\23\0\6\u0454\5\0\27\u0454\3\0\12\u044c\3\0\1\u0454"+
    "\23\0\6\u0455\5\0\27\u0455\3\0\12\u044c\3\0\1\u0455"+
    "\23\0\6\u0456\5\0\27\u0456\3\0\12\u044c\3\0\1\u0456"+
    "\23\0\6\u0457\5\0\27\u0457\3\0\12\u044c\3\0\1\u0457"+
    "\23\0\6\u0458\5\0\27\u0458\3\0\12\u044c\3\0\1\u0458"+
    "\23\0\6\u0459\5\0\27\u0459\3\0\12\u044c\3\0\1\u0459"+
    "\23\0\6\u045a\5\0\27\u045a\3\0\12\u044c\3\0\1\u045a"+
    "\23\0\6\u045b\5\0\27\u045b\3\0\12\u044c\3\0\1\u045b"+
    "\23\0\6\u045c\5\0\27\u045c\3\0\12\u044c\3\0\1\u045c"+
    "\23\0\6\u045d\5\0\27\u045d\3\0\12\u044c\3\0\1\u045d"+
    "\23\0\6\u045e\5\0\27\u045e\3\0\12\u044c\3\0\1\u045e"+
    "\23\0\6\u045f\5\0\27\u045f\3\0\12\u044c\3\0\1\u045f"+
    "\23\0\6\u0460\5\0\27\u0460\3\0\12\u044c\3\0\1\u0460"+
    "\23\0\6\u0461\5\0\27\u0461\3\0\12\u044c\3\0\1\u0461"+
    "\23\0\6\u0462\5\0\27\u0462\3\0\12\u044c\3\0\1\u0462"+
    "\23\0\6\u0463\5\0\27\u0463\3\0\12\u044c\3\0\1\u0463"+
    "\23\0\6\u0464\5\0\27\u0464\3\0\12\u044c\3\0\1\u0464"+
    "\23\0\6\u0465\5\0\27\u0465\3\0\12\u044c\3\0\1\u0465"+
    "\23\0\6\u0466\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\23\0\6\u0467\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\23\0\6\u0468\5\0\27\u0468\3\0\12\u0468\3\0\1\u0468"+
    "\23\0\6\u0469\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\23\0\6\u046a\5\0\27\u046a\3\0\12\u046b\3\0\1\u046a"+
    "\23\0\6\u046c\5\0\27\u046c\3\0\12\u046b\3\0\1\u046c"+
    "\23\0\6\u046d\5\0\27\u046d\3\0\12\u046b\3\0\1\u046d"+
    "\23\0\6\u046e\5\0\27\u046e\3\0\12\u046b\3\0\1\u046e"+
    "\23\0\6\u046f\5\0\27\u046f\3\0\12\u046b\3\0\1\u046f"+
    "\23\0\6\u0470\5\0\27\u0470\3\0\12\u046b\3\0\1\u0470"+
    "\23\0\6\u0471\5\0\27\u0471\3\0\12\u046b\3\0\1\u0471"+
    "\23\0\6\u0472\5\0\27\u0472\3\0\12\u046b\3\0\1\u0472"+
    "\23\0\6\u0473\5\0\27\u0473\3\0\12\u046b\3\0\1\u0473"+
    "\23\0\6\u0474\5\0\27\u0474\3\0\12\u046b\3\0\1\u0474"+
    "\23\0\6\u0475\5\0\27\u0475\3\0\12\u046b\3\0\1\u0475"+
    "\23\0\6\u0476\5\0\27\u0476\3\0\12\u046b\3\0\1\u0476"+
    "\23\0\6\u0477\5\0\27\u0477\3\0\12\u046b\3\0\1\u0477"+
    "\23\0\6\u0478\5\0\27\u0478\3\0\12\u046b\3\0\1\u0478"+
    "\23\0\6\u0479\5\0\27\u0479\3\0\12\u046b\3\0\1\u0479"+
    "\23\0\6\u047a\5\0\27\u047a\3\0\12\u046b\3\0\1\u047a"+
    "\23\0\6\u047b\5\0\27\u047b\3\0\12\u046b\3\0\1\u047b"+
    "\23\0\6\u047c\5\0\27\u047c\3\0\12\u046b\3\0\1\u047c"+
    "\23\0\6\u047d\5\0\27\u047d\3\0\12\u046b\3\0\1\u047d"+
    "\23\0\6\u047e\5\0\27\u047e\3\0\12\u046b\3\0\1\u047e"+
    "\23\0\6\u047f\5\0\27\u047f\3\0\12\u046b\3\0\1\u047f"+
    "\23\0\6\u0480\5\0\27\u0480\3\0\12\u046b\3\0\1\u0480"+
    "\23\0\6\u0481\5\0\27\u0481\3\0\12\u046b\3\0\1\u0481"+
    "\23\0\6\u0482\5\0\27\u0482\3\0\12\u046b\3\0\1\u0482"+
    "\23\0\6\u0483\5\0\27\u0483\3\0\12\u046b\3\0\1\u0483"+
    "\23\0\6\u0484\5\0\27\u0484\3\0\12\u046b\3\0\1\u0484"+
    "\23\0\6\u0485\5\0\27\u0485\3\0\12\u046b\3\0\1\u0485"+
    "\23\0\6\u0486\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\23\0\6\u0487\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\23\0\6\u0488\5\0\27\u0488\3\0\12\u0488\3\0\1\u0488"+
    "\23\0\6\u0489\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\23\0\6\u048a\5\0\27\u048a\3\0\12\u048b\3\0\1\u048a"+
    "\23\0\6\u048c\5\0\27\u048c\3\0\12\u048b\3\0\1\u048c"+
    "\23\0\6\u048d\5\0\27\u048d\3\0\12\u048b\3\0\1\u048d"+
    "\23\0\6\u048e\5\0\27\u048e\3\0\12\u048b\3\0\1\u048e"+
    "\23\0\6\u048f\5\0\27\u048f\3\0\12\u048b\3\0\1\u048f"+
    "\23\0\6\u0490\5\0\27\u0490\3\0\12\u048b\3\0\1\u0490"+
    "\23\0\6\u0491\5\0\27\u0491\3\0\12\u048b\3\0\1\u0491"+
    "\23\0\6\u0492\5\0\27\u0492\3\0\12\u048b\3\0\1\u0492"+
    "\23\0\6\u0493\5\0\27\u0493\3\0\12\u048b\3\0\1\u0493"+
    "\23\0\6\u0494\5\0\27\u0494\3\0\12\u048b\3\0\1\u0494"+
    "\23\0\6\u0495\5\0\27\u0495\3\0\12\u048b\3\0\1\u0495"+
    "\23\0\6\u0496\5\0\27\u0496\3\0\12\u048b\3\0\1\u0496"+
    "\23\0\6\u0497\5\0\27\u0497\3\0\12\u048b\3\0\1\u0497"+
    "\23\0\6\u0498\5\0\27\u0498\3\0\12\u048b\3\0\1\u0498"+
    "\23\0\6\u0499\5\0\27\u0499\3\0\12\u048b\3\0\1\u0499"+
    "\23\0\6\u049a\5\0\27\u049a\3\0\12\u048b\3\0\1\u049a"+
    "\23\0\6\u049b\5\0\27\u049b\3\0\12\u048b\3\0\1\u049b"+
    "\23\0\6\u049c\5\0\27\u049c\3\0\12\u048b\3\0\1\u049c"+
    "\23\0\6\u049d\5\0\27\u049d\3\0\12\u048b\3\0\1\u049d"+
    "\23\0\6\u049e\5\0\27\u049e\3\0\12\u048b\3\0\1\u049e"+
    "\23\0\6\u049f\5\0\27\u049f\3\0\12\u048b\3\0\1\u049f"+
    "\23\0\6\u04a0\5\0\27\u04a0\3\0\12\u048b\3\0\1\u04a0"+
    "\23\0\6\u04a1\5\0\27\u04a1\3\0\12\u048b\3\0\1\u04a1"+
    "\23\0\6\u04a2\5\0\27\u04a2\3\0\12\u048b\3\0\1\u04a2"+
    "\23\0\6\u04a3\5\0\27\u04a3\3\0\12\u048b\3\0\1\u04a3"+
    "\23\0\6\u04a4\5\0\27\u04a4\3\0\12\u048b\3\0\1\u04a4"+
    "\23\0\6\u04a5\5\0\27\u04a5\3\0\12\u048b\3\0\1\u04a5"+
    "\23\0\6\u04a6\5\0\27\u04a6\3\0\12\u048b\3\0\1\u04a6"+
    "\23\0\6\u04a7\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\23\0\6\u04a8\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\23\0\6\u04a9\5\0\27\u04a9\3\0\12\u04a9\3\0\1\u04a9"+
    "\23\0\6\u04aa\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\23\0\6\u04ab\5\0\27\u04ab\3\0\12\u04ac\3\0\1\u04ab"+
    "\23\0\6\u04ad\5\0\27\u04ad\3\0\12\u04ac\3\0\1\u04ad"+
    "\23\0\6\u04ae\5\0\27\u04ae\3\0\12\u04ac\3\0\1\u04ae"+
    "\23\0\6\u04af\5\0\27\u04af\3\0\12\u04ac\3\0\1\u04af"+
    "\23\0\6\u04b0\5\0\27\u04b0\3\0\12\u04ac\3\0\1\u04b0"+
    "\23\0\6\u04b1\5\0\27\u04b1\3\0\12\u04ac\3\0\1\u04b1"+
    "\23\0\6\u04b2\5\0\27\u04b2\3\0\12\u04ac\3\0\1\u04b2"+
    "\23\0\6\u04b3\5\0\27\u04b3\3\0\12\u04ac\3\0\1\u04b3"+
    "\23\0\6\u04b4\5\0\27\u04b4\3\0\12\u04ac\3\0\1\u04b4"+
    "\23\0\6\u04b5\5\0\27\u04b5\3\0\12\u04ac\3\0\1\u04b5"+
    "\23\0\6\u04b6\5\0\27\u04b6\3\0\12\u04ac\3\0\1\u04b6"+
    "\23\0\6\u04b7\5\0\27\u04b7\3\0\12\u04ac\3\0\1\u04b7"+
    "\23\0\6\u04b8\5\0\27\u04b8\3\0\12\u04ac\3\0\1\u04b8"+
    "\23\0\6\u04b9\5\0\27\u04b9\3\0\12\u04ac\3\0\1\u04b9"+
    "\23\0\6\u04ba\5\0\27\u04ba\3\0\12\u04ac\3\0\1\u04ba"+
    "\23\0\6\u04bb\5\0\27\u04bb\3\0\12\u04ac\3\0\1\u04bb"+
    "\23\0\6\u04bc\5\0\27\u04bc\3\0\12\u04ac\3\0\1\u04bc"+
    "\23\0\6\u04bd\5\0\27\u04bd\3\0\12\u04ac\3\0\1\u04bd"+
    "\23\0\6\u04be\5\0\27\u04be\3\0\12\u04ac\3\0\1\u04be"+
    "\23\0\6\u04bf\5\0\27\u04bf\3\0\12\u04ac\3\0\1\u04bf"+
    "\23\0\6\u04c0\5\0\27\u04c0\3\0\12\u04ac\3\0\1\u04c0"+
    "\23\0\6\u04c1\5\0\27\u04c1\3\0\12\u04ac\3\0\1\u04c1"+
    "\23\0\6\u04c2\5\0\27\u04c2\3\0\12\u04ac\3\0\1\u04c2"+
    "\23\0\6\u04c3\5\0\27\u04c3\3\0\12\u04ac\3\0\1\u04c3"+
    "\23\0\6\u04c4\5\0\27\u04c4\3\0\12\u04ac\3\0\1\u04c4"+
    "\23\0\6\u04c5\5\0\27\u04c5\3\0\12\u04ac\3\0\1\u04c5"+
    "\23\0\6\u04c6\5\0\27\u04c6\3\0\12\u04ac\3\0\1\u04c6"+
    "\23\0\6\u04c7\5\0\27\u04c7\3\0\12\u04ac\3\0\1\u04c7"+
    "\23\0\6\u04c8\5\0\27\u04c8\3\0\12\u04ac\3\0\1\u04c8"+
    "\23\0\6\u04c9\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\23\0\6\u04ca\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\23\0\6\u04cb\5\0\27\u04cb\3\0\12\u04cb\3\0\1\u04cb"+
    "\23\0\6\u04cc\5\0\27\77\3\0\12\100\3\0\1\77"+
    "\70\0\12\u04cd\27\0\6\u04ce\5\0\27\u04ce\3\0\12\u04cd"+
    "\3\0\1\u04ce\23\0\6\u04cf\5\0\27\u04cf\3\0\12\u04cd"+
    "\3\0\1\u04cf\23\0\6\u04d0\5\0\27\u04d0\3\0\12\u04cd"+
    "\3\0\1\u04d0\23\0\6\u04d1\5\0\27\u04d1\3\0\12\u04cd"+
    "\3\0\1\u04d1\23\0\6\u04d2\5\0\27\u04d2\3\0\12\u04cd"+
    "\3\0\1\u04d2\23\0\6\u04d3\5\0\27\u04d3\3\0\12\u04cd"+
    "\3\0\1\u04d3\23\0\6\u04d4\5\0\27\u04d4\3\0\12\u04cd"+
    "\3\0\1\u04d4\23\0\6\u04d5\5\0\27\u04d5\3\0\12\u04cd"+
    "\3\0\1\u04d5\23\0\6\u04d6\5\0\27\u04d6\3\0\12\u04cd"+
    "\3\0\1\u04d6\23\0\6\u04d7\5\0\27\u04d7\3\0\12\u04cd"+
    "\3\0\1\u04d7\23\0\6\u04d8\5\0\27\u04d8\3\0\12\u04cd"+
    "\3\0\1\u04d8\23\0\6\u04d9\5\0\27\u04d9\3\0\12\u04cd"+
    "\3\0\1\u04d9\23\0\6\u04da\5\0\27\u04da\3\0\12\u04cd"+
    "\3\0\1\u04da\23\0\6\u04db\5\0\27\u04db\3\0\12\u04cd"+
    "\3\0\1\u04db\23\0\6\u04dc\5\0\27\u04dc\3\0\12\u04cd"+
    "\3\0\1\u04dc\23\0\6\u04dd\5\0\27\u04dd\3\0\12\u04cd"+
    "\3\0\1\u04dd\23\0\6\u04de\5\0\27\u04de\3\0\12\u04cd"+
    "\3\0\1\u04de\23\0\6\u04df\5\0\27\u04df\3\0\12\u04cd"+
    "\3\0\1\u04df\23\0\6\u04e0\5\0\27\u04e0\3\0\12\u04cd"+
    "\3\0\1\u04e0\23\0\6\u04e1\5\0\27\u04e1\3\0\12\u04cd"+
    "\3\0\1\u04e1\23\0\6\u04e2\5\0\27\u04e2\3\0\12\u04cd"+
    "\3\0\1\u04e2\23\0\6\u04e3\5\0\27\u04e3\3\0\12\u04cd"+
    "\3\0\1\u04e3\23\0\6\u04e4\5\0\27\u04e4\3\0\12\u04cd"+
    "\3\0\1\u04e4\23\0\6\u04e5\5\0\27\u04e5\3\0\12\u04cd"+
    "\3\0\1\u04e5\23\0\6\u04e6\5\0\27\u04e6\3\0\12\u04cd"+
    "\3\0\1\u04e6\23\0\6\u04e7\5\0\27\u04e7\3\0\12\u04cd"+
    "\3\0\1\u04e7\23\0\6\u04e8\5\0\27\u04e8\3\0\12\u04cd"+
    "\3\0\1\u04e8\23\0\6\u04e9\5\0\27\u04e9\3\0\12\u04cd"+
    "\3\0\1\u04e9\23\0\6\u04ea\5\0\27\u04ea\3\0\12\u04cd"+
    "\3\0\1\u04ea\23\0\6\u04eb\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\u04ec\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\u04ed\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\u04ee\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\u04ef\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\u04f0\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\u04f1\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\u04f2\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\u04f3\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\u04f4\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\u04f5\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\u04f6\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\u04f7\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\u04f8\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\u04f9\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\u04fa\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\u04fb\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\u04fc\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\u04fd\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\u04fe\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\u04ff\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\u0500\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\u0501\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\110\5\0\27\77\3\0\12\100"+
    "\3\0\1\77\23\0\6\u0502\5\0\27\77\3\0\12\100"+
    "\3\0\1\77";

  private static int [] zzUnpackTrans() {
    int [] result = new int[80990];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\2\11\2\1\3\11\1\1\1\11"+
    "\1\1\1\11\5\1\2\11\22\1\3\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\2\11\1\0\11\1\3\11\1\0\35\1\1\11"+
    "\4\0\2\1\1\0\52\1\3\0\1\1\1\11\3\1"+
    "\1\0\50\1\2\0\5\1\1\0\43\1\3\0\5\1"+
    "\1\0\34\1\1\11\3\0\6\1\1\0\31\1\4\0"+
    "\7\1\1\0\24\1\5\0\10\1\1\0\22\1\6\0"+
    "\11\1\1\0\20\1\7\0\12\1\1\0\17\1\10\0"+
    "\13\1\1\0\17\1\11\0\14\1\1\0\17\1\12\0"+
    "\15\1\1\0\20\1\13\0\16\1\1\0\21\1\14\0"+
    "\17\1\1\0\22\1\15\0\20\1\1\0\24\1\15\0"+
    "\21\1\1\0\24\1\16\0\22\1\1\0\25\1\17\0"+
    "\23\1\1\0\26\1\43\0\1\1\1\0\27\1\22\0"+
    "\1\1\1\0\30\1\22\0\1\1\1\0\32\1\1\0"+
    "\33\1\1\0\34\1\1\0\35\1\1\0\36\1\1\0"+
    "\37\1\1\0\40\1\1\0\41\1\1\0\1\11\40\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1282];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */




    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }

    // Definir el conjunto de funciones a excluir
   private static final Set<String> PALABRASRESERV = new HashSet<>(Arrays.asList(
    "FREC", "ENT", "COLOR", "DEC", "BOOL", "CAD", "SI", "SINO", "MIENTRAS", 
    "REPETIR", "CLASE", "DEF", "CONSOL", "ESCRIB", "APAGAR", "LCD", 
    "PRENDER", "IMPR", "ATRAS", "IZQUIERDA", "DERECHA", "ALARMA", "REVISAR", 
    "ADELANTE", "CAJA", "SOLTAR", "PARAR", "LIMPIAR", "TOMAR", "VECT",
    "VERADELANTE","VERATRAS","VERIZQUIERDA","VERDERECHA"
    ));


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexema(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR", yyline, yycolumn);
            }
            // fall through
          case 88: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 89: break;
          case 3:
            { return token(yytext(), "OpLog_NO", yyline, yycolumn);
            }
            // fall through
          case 90: break;
          case 4:
            { return token(yytext(), "ERROR_1", yyline, yycolumn);
            }
            // fall through
          case 91: break;
          case 5:
            { return token(yytext(), "Op_Mod", yyline, yycolumn);
            }
            // fall through
          case 92: break;
          case 6:
            { return token(yytext(), "ERROR_6", yyline, yycolumn);
            }
            // fall through
          case 93: break;
          case 7:
            { return token(yytext(), "Par_abr", yyline, yycolumn);
            }
            // fall through
          case 94: break;
          case 8:
            { return token(yytext(), "Par_cer", yyline, yycolumn);
            }
            // fall through
          case 95: break;
          case 9:
            { return token(yytext(), "Op_Mul", yyline, yycolumn);
            }
            // fall through
          case 96: break;
          case 10:
            { return token(yytext(), "Op_Sum", yyline, yycolumn);
            }
            // fall through
          case 97: break;
          case 11:
            { return token(yytext(), "Coma", yyline, yycolumn);
            }
            // fall through
          case 98: break;
          case 12:
            { return token(yytext(), "Op_Res", yyline, yycolumn);
            }
            // fall through
          case 99: break;
          case 13:
            { return token(yytext(), "Punto", yyline, yycolumn);
            }
            // fall through
          case 100: break;
          case 14:
            { return token(yytext(), "Op_Div", yyline, yycolumn);
            }
            // fall through
          case 101: break;
          case 15:
            { return token(yytext(), "Numero_Mini", yyline, yycolumn);
            }
            // fall through
          case 102: break;
          case 16:
            { return token(yytext(), "DosPuntos", yyline, yycolumn);
            }
            // fall through
          case 103: break;
          case 17:
            { return token(yytext(), "Punto_coma", yyline, yycolumn);
            }
            // fall through
          case 104: break;
          case 18:
            { return token(yytext(), "OpRel_Menor", yyline, yycolumn);
            }
            // fall through
          case 105: break;
          case 19:
            { return token(yytext(), "Op_asignacion", yyline, yycolumn);
            }
            // fall through
          case 106: break;
          case 20:
            { return token(yytext(), "OpRel_Mayor", yyline, yycolumn);
            }
            // fall through
          case 107: break;
          case 21:
            { if (!PALABRASRESERV.contains(yytext())) {
        return token(yytext(), "ERROR_7", yyline, yycolumn);
    }
            }
            // fall through
          case 108: break;
          case 22:
            { return token(yytext(), "Corch_abr", yyline, yycolumn);
            }
            // fall through
          case 109: break;
          case 23:
            { return token(yytext(), "Corch_cer", yyline, yycolumn);
            }
            // fall through
          case 110: break;
          case 24:
            { return token(yytext(), "Op_Potencia", yyline, yycolumn);
            }
            // fall through
          case 111: break;
          case 25:
            { return token(yytext(), "Identificador", yyline, yycolumn);
            }
            // fall through
          case 112: break;
          case 26:
            { return token(yytext(), "Llav_abr", yyline, yycolumn);
            }
            // fall through
          case 113: break;
          case 27:
            { return token(yytext(), "Llav_cer", yyline, yycolumn);
            }
            // fall through
          case 114: break;
          case 28:
            { return token(yytext(), "OpRel_NoIgual", yyline, yycolumn);
            }
            // fall through
          case 115: break;
          case 29:
            { return token(yytext(), "OpLog_Y", yyline, yycolumn);
            }
            // fall through
          case 116: break;
          case 30:
            { return token(yytext(), "Cadena", yyline, yycolumn);
            }
            // fall through
          case 117: break;
          case 31:
            { return token(yytext(), "Op_MasIgual", yyline, yycolumn);
            }
            // fall through
          case 118: break;
          case 32:
            { return token(yytext(), "Op_MenosIgual", yyline, yycolumn);
            }
            // fall through
          case 119: break;
          case 33:
            { return token(yytext(), "ERROR_5", yyline, yycolumn);
            }
            // fall through
          case 120: break;
          case 34:
            { return token(yytext(), "Numero_Entero", yyline, yycolumn);
            }
            // fall through
          case 121: break;
          case 35:
            { return token(yytext(), "ERROR_3", yyline, yycolumn);
            }
            // fall through
          case 122: break;
          case 36:
            { return token(yytext(), "OpRel_MenorIg", yyline, yycolumn);
            }
            // fall through
          case 123: break;
          case 37:
            { return token(yytext(), "OpRel_Igual", yyline, yycolumn);
            }
            // fall through
          case 124: break;
          case 38:
            { return token(yytext(), "OpRel_MayorIg", yyline, yycolumn);
            }
            // fall through
          case 125: break;
          case 39:
            { return token(yytext(),"Est_SI",yyline,yycolumn);
            }
            // fall through
          case 126: break;
          case 40:
            { return token(yytext(), "OpLog_O", yyline, yycolumn);
            }
            // fall through
          case 127: break;
          case 41:
            { return token(yytext(), "Numero_Decimal", yyline, yycolumn);
            }
            // fall through
          case 128: break;
          case 42:
            { return token(yytext(), "CAD", yyline, yycolumn);
            }
            // fall through
          case 129: break;
          case 43:
            { return token(yytext(), "DEC", yyline, yycolumn);
            }
            // fall through
          case 130: break;
          case 44:
            { return token(yytext(), "DEF", yyline, yycolumn);
            }
            // fall through
          case 131: break;
          case 45:
            { return token(yytext(), "ENT", yyline, yycolumn);
            }
            // fall through
          case 132: break;
          case 46:
            { return token(yytext(),"LCD",yyline,yycolumn);
            }
            // fall through
          case 133: break;
          case 47:
            { return token(yytext(), "F_VER", yyline, yycolumn);
            }
            // fall through
          case 134: break;
          case 48:
            { return token(yytext(), "BOOL", yyline, yycolumn);
            }
            // fall through
          case 135: break;
          case 49:
            { return token(yytext(), "F_CAJA", yyline, yycolumn);
            }
            // fall through
          case 136: break;
          case 50:
            { return token(yytext(), "CONF", yyline, yycolumn);
            }
            // fall through
          case 137: break;
          case 51:
            { return token(yytext(), "FREC", yyline, yycolumn);
            }
            // fall through
          case 138: break;
          case 52:
            { return token(yytext(), "F_IMPR", yyline, yycolumn);
            }
            // fall through
          case 139: break;
          case 53:
            { return token(yytext(),"Est_LEER",yyline,yycolumn);
            }
            // fall through
          case 140: break;
          case 54:
            { return token(yytext(), "MINI", yyline, yycolumn);
            }
            // fall through
          case 141: break;
          case 55:
            { return token(yytext(),"Est_SINO",yyline,yycolumn);
            }
            // fall through
          case 142: break;
          case 56:
            { return token(yytext(), "VECTOR", yyline, yycolumn);
            }
            // fall through
          case 143: break;
          case 57:
            { return token(yytext(), "F_ATRAS", yyline, yycolumn);
            }
            // fall through
          case 144: break;
          case 58:
            { return token(yytext(), "F_BAJAR", yyline, yycolumn);
            }
            // fall through
          case 145: break;
          case 59:
            { return token(yytext(),"CLASE",yyline,yycolumn);
            }
            // fall through
          case 146: break;
          case 60:
            { return token(yytext(), "COLOR", yyline, yycolumn);
            }
            // fall through
          case 147: break;
          case 61:
            { return token(yytext(), "Falso", yyline, yycolumn);
            }
            // fall through
          case 148: break;
          case 62:
            { return token(yytext(), "F_PARAR", yyline, yycolumn);
            }
            // fall through
          case 149: break;
          case 63:
            { return token(yytext(), "F_SUBIR", yyline, yycolumn);
            }
            // fall through
          case 150: break;
          case 64:
            { return token(yytext(), "F_TOMAR", yyline, yycolumn);
            }
            // fall through
          case 151: break;
          case 65:
            { return token(yytext(), "F_ALARMA", yyline, yycolumn);
            }
            // fall through
          case 152: break;
          case 66:
            { return token(yytext(),"APAGAR",yyline,yycolumn);
            }
            // fall through
          case 153: break;
          case 67:
            { return token(yytext(),"CONSOL",yyline,yycolumn);
            }
            // fall through
          case 154: break;
          case 68:
            { return token(yytext(), "F_SOLTAR", yyline, yycolumn);
            }
            // fall through
          case 155: break;
          case 69:
            { return token(yytext(), "Hexadecimal", yyline, yycolumn);
            }
            // fall through
          case 156: break;
          case 70:
            { return token(yytext(), "F_DERECHA", yyline, yycolumn);
            }
            // fall through
          case 157: break;
          case 71:
            { return token(yytext(), "F_LIMPIAR", yyline, yycolumn);
            }
            // fall through
          case 158: break;
          case 72:
            { return token(yytext(),"PRENDER",yyline,yycolumn);
            }
            // fall through
          case 159: break;
          case 73:
            { return token(yytext(),"Est_REPETIR",yyline,yycolumn);
            }
            // fall through
          case 160: break;
          case 74:
            { return token(yytext(),"PbC_RETORNA",yyline,yycolumn);
            }
            // fall through
          case 161: break;
          case 75:
            { return token(yytext(), "F_REVISAR", yyline, yycolumn);
            }
            // fall through
          case 162: break;
          case 76:
            { return token(yytext(), "F_ADELANTE", yyline, yycolumn);
            }
            // fall through
          case 163: break;
          case 77:
            { return token(yytext(),"Est_MIENTRAS",yyline,yycolumn);
            }
            // fall through
          case 164: break;
          case 78:
            { return token(yytext(), "VerAtras", yyline, yycolumn);
            }
            // fall through
          case 165: break;
          case 79:
            { return token(yytext(), "F_IZQUIERDA", yyline, yycolumn);
            }
            // fall through
          case 166: break;
          case 80:
            { return token(yytext(), "PRINCIPAL", yyline, yycolumn);
            }
            // fall through
          case 167: break;
          case 81:
            { return token(yytext(), "Verdadero", yyline, yycolumn);
            }
            // fall through
          case 168: break;
          case 82:
            { return token(yytext(), "ImprVector", yyline, yycolumn);
            }
            // fall through
          case 169: break;
          case 83:
            { return token(yytext(), "VerDerecha", yyline, yycolumn);
            }
            // fall through
          case 170: break;
          case 84:
            { return token(yytext(), "VerAdelante", yyline, yycolumn);
            }
            // fall through
          case 171: break;
          case 85:
            { return token(yytext(), "VerIzquierda", yyline, yycolumn);
            }
            // fall through
          case 172: break;
          case 86:
            { return token(yytext(), "ERROR_4", yyline, yycolumn);
            }
            // fall through
          case 173: break;
          case 87:
            { return token(yytext(), "ERROR_2", yyline, yycolumn);
            }
            // fall through
          case 174: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
